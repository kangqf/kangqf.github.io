<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[kblog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://kangqingfei.cn/"/>
  <updated>2016-01-09T06:20:16.000Z</updated>
  <id>http://kangqingfei.cn/</id>
  
  <author>
    <name><![CDATA[kangqingfei]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[computer network basis]]></title>
    <link href="http://kangqingfei.cn/2016/01/06/computer-network-basis/"/>
    <id>http://kangqingfei.cn/2016/01/06/computer-network-basis/</id>
    <published>2016-01-06T04:54:09.000Z</published>
    <updated>2016-01-09T06:20:16.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5199VMware_u7684_u7F51_u7EDC_u6A21_u5F0F_u90A3_u7BC7_u6587_u7AE0_u5199_u4E0D_u4E0B_u53BB_u4E86_uFF0C_u6240_u4EE5_u5148_u5199_u5B8C_u8FD9_u7BC7_u52A0_u6DF1_u81EA_u5DF1_u5BF9_u8BA1_u7B97_u673A_u7F51_u7EDC_u7684_u8BA4_u8BC6_u518D_u7EE7_u7EED_u5199_u90A3_u4E2A_u3002"><a href="#u5199VMware_u7684_u7F51_u7EDC_u6A21_u5F0F_u90A3_u7BC7_u6587_u7AE0_u5199_u4E0D_u4E0B_u53BB_u4E86_uFF0C_u6240_u4EE5_u5148_u5199_u5B8C_u8FD9_u7BC7_u52A0_u6DF1_u81EA_u5DF1_u5BF9_u8BA1_u7B97_u673A_u7F51_u7EDC_u7684_u8BA4_u8BC6_u518D_u7EE7_u7EED_u5199_u90A3_u4E2A_u3002" class="headerlink" title="写VMware的网络模式那篇文章写不下去了，所以先写完这篇加深自己对计算机网络的认识再继续写那个。"></a>写VMware的网络模式那篇文章写不下去了，所以先写完这篇加深自己对计算机网络的认识再继续写那个。</h3><p>关于计算机网络，大都要讲到TCP/IP 这个协议簇，总共有四层：网络接入层，网络层（说法不一），传输层，应用层。相比于OSI七层模型，它把物理层和数据链路层归一为网络接入层，因为我们很少情况下会考虑物理层的关系，然后又相当于把会话层，表示层，应用层归一为应用层，因为我们极少接触到会话层和表示层（我所接触的也就是像SDP这种传输信令的协议会归在会话层），所以没有必要细分。说完协议簇，再说这几个层次的标识：</p>
<ul>
<li>网络接入层：MAC地址标识，是计算机的硬件地址，一般不会改变，固化在计算机的网卡上。当然你有多个网卡就会有多个MAC地址，一般像PPP协议是工作在这上面的。</li>
<li>网络层：IP地址标识，计算机的虚拟地址，相当于一个临时的身份证，很有可能会经常改变（除了某些骨干网的节点路由器和核心交换机一般不变，还有就是服务器的），一台计算机可能有多个IP地址，IP地址又可分为ABCDE类，当然现在一般都用CIDR进行路由，所以这个分类一般没啥意思了，还有就是一些特殊的IP地址：<ul>
<li>127.0.0.0/8 本地回环测试地址，不进行任何路由和转发直接，甚至不会进入到网卡，你可以试着用Wireshark监听网卡的ICMP报文，然后ping 127.0.0.1 会发现没有监听到任何数据包，这意味着数据报就没有下到链路层，直接在网络层就被返回本机处理了。</li>
<li>0.0.0.0，关于这个地址说法一，主要还是参考维基百科里面的说法，主要有下面几个含义：<ul>
<li>从IPv4 角度来讲，作为目的地址是指不可路由的地址用于指定一个无效的或未知的或不适用的目标。作为源地址是一种带内信令的应用（DHCP），是给本来非法的数据报提供一个特殊含义。0.0.0.0作为源地址时一般用在DHCP获取IP时，主机从来不知道自己的IP所以就将源IP设置为 0.0.0.0 （如果之前有过IP的话就会和DHCP服务器协商这个IP是否有效，即租期到了没，即使是这种情况也是 把最后使用的那个IP地址放在udp数据报里面而不是源地址。顺便提一下DHCP的四个阶段 DHCPDISCOVER DHCPOFFER DHCPREQUEST DHCPACK）。</li>
<li>从服务器角度来讲，这代表着本机所有的IPv4地址，如果一个服务器在监听0.0.0.0则表示它在监听本机的所有ip，所以可以通过任意一个可达的IP访问服务器。(所以在编程中经常是监听这个地址而不是127.0.0.1以便其他人访问)</li>
<li>从路由的角度来看，这就意味着默认的路由，就是在路由表中查不到的就通过这个路由，相当于告诉你，其他路都走不通了就走这条路。Windows系统会自动产生一个目的地址为0.0.0.0的默认路由（他对应的网关就是默认网关）。而对于 0.0.0.0的默认网关就是意味着直接进行二层通信，不经过三层（代表直连路由，就是不要通过网关），一般这样的条目不会设置G标志，因为说明目的地是直接相连的条目会以G标识，该路由是到一个网关（路由器，要路由的）。</li>
<li>0.0.0.0/8 指本网络的主机（0.0.0.0就是指本网络，主机ID为0），0.0.0.0/32（就是0.0.0.0） 作为一个源地址指本网络的本主机（只能在被用做源地址来获取自己主机IP的时候用） 0.0.0.0/8 里面的其他地址指本网络上的某个特定主机（只能在被用做源地址来获取特定主机IP的时候用，帮助别人获取ip）<a href="http://superuser.com/questions/388056/where-are-addresses-from-the-network-0-0-0-0-8-used-in-practice" target="_blank" rel="external">参考这里</a></li>
</ul>
</li>
<li>255.255.255.255 受限广播地址，只用作目的地址，这种目的地址的数据报不会被路由器转发（除非特别设置路由器将数据报转发到另一网络，这种情况一般是主机数较多，且主机和DHCP服务器不在同一网络内），其广播功能限制在本网内部，可用作DHCP时的目的ip。</li>
<li>专用地址，一般用作局域网，比如校园网，家庭路由器。最大的CIDR地址块分别有 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16，这里要注意是 <strong><em>最大的</em></strong> 以为很多都不会用到最大的块，比如有些家庭路由器只是用到了 192.168.1.0/8 这样的一个C类地址块。</li>
<li>169.254.0.0/16 链路本地地址，这些地址与专用网络地址一样不可路由，也不可作为公共网络上报文的源或目的地址。链路本地地址主要被用于地址自动配置：当主机不能从DHCP服务器处获得IP地址时，它会用这种方法生成一个。微软创建了一种叫自动专用IP寻址（APIPA）的实现，所以当你的windows电脑不能DHCP获取ip是就会生成一个169.254.x.x的ip。</li>
<li>224.0.0.0/4    多播（之前的D类网络）只能用作目的地址，而不能作为分组中的源地址。</li>
<li>240.0.0.0/4    保留（之前的E类网络）</li>
<li>网络号全0， 当某个主机向同一网段上的其他主机发送报文时就可以使用这样的地址，分组也不会被路由器转发。相当于本网络。</li>
<li>表示主机的二进制位（主机号）全0或全1不能使用，全0表示本网（网络地址），全1表示本网广播（直接广播地址），一个常见的误解是以0或255结尾的地址永远不能分配给主机：这仅在子网掩码至少24位长度时（旧的C类地址，或CIDR中的/24到/32）才成立。比如，在B类子网192.168.0.0/255.255.0.0（即192.168.0.0/16）中，广播地址是192.168.255.255。在这种情况下，尽管可能带来误解，但192.168.1.255、192.168.2.255等地址可以被分配给主机。广播地址是借由子网掩码的比特补数并和网络识别码运行 OR的比特运算就能获得，在A、B和C类网络中，广播地址总是以255结尾。随着CIDR的到来，广播地址不一定总是以255结尾。比如，子网203.0.113.16/28的广播地址是203.0.113.31。一般情况下，子网的第一个和最后一个地址分别被作为网络识别码和广播地址，任何其它地址都可以被分配给其上的主机。（以上内容参考<a href="https://zh.wikipedia.org/wiki/IPv4" target="_blank" rel="external">维基百科</a>）。</li>
</ul>
</li>
<li>传输层，主要是TCP UDP这些协议来保证网络的有效性。在这上面一般用端口来标识一个身份。</li>
<li>应用层，用进程ID来标识一个身份。</li>
</ul>
<h2 id="u8BF4_u5B8C_u56DB_u5C42_u6A21_u578B_uFF0C_u518D_u8BF4_u4E00_u4E9B_u4F5C_u7528_u57DF_u7684_u95EE_u9898_uFF0C_u5148_u641E_u6E05_u695A_u51E0_u4E2A_u4E1C_u897F_uFF1A"><a href="#u8BF4_u5B8C_u56DB_u5C42_u6A21_u578B_uFF0C_u518D_u8BF4_u4E00_u4E9B_u4F5C_u7528_u57DF_u7684_u95EE_u9898_uFF0C_u5148_u641E_u6E05_u695A_u51E0_u4E2A_u4E1C_u897F_uFF1A" class="headerlink" title="说完四层模型，再说一些作用域的问题，先搞清楚几个东西："></a>说完四层模型，再说一些作用域的问题，先搞清楚几个东西：</h2><ul>
<li>集线器，用来物理上连接几台主机，它的作用域在物理层，各主机处在同一碰撞域之中，他们共享带宽。</li>
<li>网桥，为了减小碰撞域，实现几台主机的链路层互联，通信方式是以MAC地址进行通信。一般的网桥只有两端，而多接口网桥可以有多个端。网桥的A端口连接A子网，B端口连接B子网，为什么网桥知道哪些数据包该转发，哪些包不该转发呢？那是因为它有两个表A和B，当有数据包进入端口A时，网桥从数据包中提取出源MAC地址和目的MAC地址。一开始的时候，表A和表B都是空的，没有一条记录，这时，网桥会把数据包转发给B网络，并且在表A中增加一条MAC地址(把源MAC地址记录表中)，说明这个MAC地址的机器是A子网的，同理，当B子网发送数据包到B端口时，网桥也会记录源MAC地址到B表。当网桥工作一段时候后，表A基本上记录了A子网所有的机器的MAC地址，表B同理，当再有一个数据包从A子网发送给网桥时，网桥会先看看数据包的目的MAC地址是属于A子网还是B子网的，如果从A表中找到对应则，抛弃该包，如果不是，则转发给B子网，然后检查源MAC地址，是否在表中已经存在，如果不存在，在表A中增加一条记录。</li>
<li>二层交换机（多接口网桥），交换机也有一张MAC-PORT对应表(这张表的学名为：CAM)，和网桥不一样的是，网桥的表是一对多的(一个端口号对多个MAC地址)，但交换机的CAM表却是一对一的，如果一个端口有新的MAC地址，它不会新增MAC－PORT记录，而是修改原有的记录（参考<a href="http://network.51cto.com/art/201107/277187.htm" target="_blank" rel="external">这里</a>）。 <strong><em>这就意味着如果二层交换机下面再接集线器是不是会出现问题？</em></strong></li>
<li>三层交换机与路由器，这和网桥有着本质的不同，这是工作在网络层的，用IP地址里面的 <strong><em>网络号</em></strong> 进行通信。但是三层交换机的主要功能仍是数据交换（<a href="http://www.to8to.com/yezhu/v3302.html" target="_blank" rel="external">参考这里</a>），它的路由功能通常比较简单，因为它所面对的主要是简单的局域网连接，路由路径远没有路由器那么复杂，它用在局域网中的主要用途还是提供快速数据交换功能，满足局域网数据交换频繁的应用特点。路由器的主要功能还是路由功能，它的路由功能更多的体现在不同类型网络之间的互联上，如局域网与广域网之间的连接、不同协议的网络之间的连接等，所以路由器主要是用于不同类型的网络之间。它最主要的功能就是路由转发，解决好各种复杂路由路径网络的连接就是它的最终目的，所以路由器的路由功能通常非常强大，不仅适用于同种协议的局域网间，更适用于不同协议的局域网与广域网间。它的优势在于选择最佳路由、负荷分担、链路备份及和其他网络进行路由信息的交换等等路由器所具有功能。为了与各种类型的网络连接，路由器的接口类型非常丰富，而三层交换机则一般仅同类型的局域网接口，非常简单。从技术上讲，路由器和三层交换机在数据包交换操作上存在着明显区别。路由器一般由基于微处理器的软件路由引擎执行数据包交换，而三层交换机通过硬件执行数据包交换。三层交换机在对第一个数据流进行路由后，它将会产生一个MAC地址与IP地址的映射表，当同样的数据流再次通过时，将根据此表直接从二层通过而不是再次路由，从而消除了路由器进行路由选择而造成网络的延迟，提高了数据包转发的效率。同时，三层交换机的路由查找是针对数据流的，它利用缓存技术，很容易利用ASIC技术来实现，因此，可以大大节约成本，并实现快速转发。而路由器的转发采用最长匹配的方式，实现复杂，通常使用软件来实现，转发效率较低。正因如此，从整体性能上比较的话，三层交换机的性能要远优于路由器，非常适用于数据交换频繁的局域网中;而路由器虽然路由功能非常强大，但它的数据包转发效率远低于三层交换机，更适合于数据交换不是很频繁的不同类型网络的互联，如局域网与互联网的互联。如果把路由器，特别是高档路由器用于局域网中，则在相当大程度上是一种浪费(就其强大的路由功能而言)，而且还不能很好地满足局域网通信性能需求，影响子网间的正常通信综上所述，在局域网中进行多子网连接，最好还选用三层交换机，特别是在不同子网数据交换频繁的环境中。一方面可以确保子网间的通信性能需求，另一方面省去了另外购买交换机的投资。当然，如果子网间的通信不是很频繁，采用路由器也无可厚非，也可达到子网安全隔离相互通信的目的。具体要根据实际需求来定。三层交换与路由最大的区别就在于：路由支持nat转换，而三层不支持。在实际工程中体现出来就在：路由上直接接光纤可以上网，而将光纤接到层三设备上是不能上网了。三层每个端口都有专用的mac地址，有专用的ASIC集成电路。 <strong>一般的对于家庭路由器只要不接wan口而全部接在LAN口就相当于一个小型的二层交换机了</strong></li>
<li>网关，（route -n查询）如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关。这个网关是由目的ip跟路由表里面的条目进行匹配后得出的（）。默认网关是主机的默认下一跳地址，一般小型网络默认网关（家庭网络）是路由器，大型网络（校园网）是三层交换机。</li>
<li>ARP协议 地址解析协议，即ARP（Address Resolution Protocol），当数据报从路由器下发到交换机的端口时候只有IP地址，而没有MAC地址，所以就需要将IP地址里面的 <strong><em>主机号</em></strong> 翻译成为MAC地址(向局域网内广播来得到)，然后将数据报下发到指定主机。还有就是主机要知道网关（DHCP只提供网关IP）、DHCP服务器的MAC地址时，或是和同一局域网内的主机通信时也会用到。例如我们可以看到这样的ARP请求<code>Broadcast    ARP    60    Who has 172.19.72.1?  Tell 172.19.73.53</code> 响应是<code>172.19.72.1 is at 00:18:82:c6:a3:b4</code>，另外要注意的是路由表配置正确的路由器只会对本网内的ip使用arp协议，对于非本网内的ip由于不在一个链路域里面，所以即使拿到他的mac也无法下发，所以对于这种ip的数据报只能把它发给其他路由器。</li>
<li>TTL 是指链路的经过的跳数的最大值（有的是数据报的存活时间），这个主要是用来防止链路出现了环路而浪费带宽</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5199VMware_u7684_u7F51_u7EDC_u6A21_u5F0F_u90A3_u7BC7_u6587_u7AE0_u5199_u4E0D_u4E0B_u53BB_u4E86_uFF0C_u6240_u4EE5_u5148_u5199_u5B8C_]]>
    </summary>
    
      <category term="basis" scheme="http://kangqingfei.cn/tags/basis/"/>
    
      <category term="computer" scheme="http://kangqingfei.cn/tags/computer/"/>
    
      <category term="network" scheme="http://kangqingfei.cn/tags/network/"/>
    
      <category term="tips" scheme="http://kangqingfei.cn/categories/tips/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VMware config network]]></title>
    <link href="http://kangqingfei.cn/2016/01/05/VMware-config-network/"/>
    <id>http://kangqingfei.cn/2016/01/05/VMware-config-network/</id>
    <published>2016-01-05T13:19:25.000Z</published>
    <updated>2016-01-09T13:18:24.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u4ECA_u5929_u6298_u817E_u865A_u62DF_u673A_u5404_u79CD_u7F51_u7EDC_u7684_u95EE_u9898_uFF0C_u7535_u8111_u4E5F_u662F_u8001_u5361_u6B7B_uFF0C_u607C_u706B_u6B7B_u4E86_uFF0C_u6691_u5047_u7684_u65F6_u5019_u53C2_u52A0_u5D4C_u5165_u5F0F_u57F9_u8BAD_u7684_u65F6_u5019_u7531_u4E8E_u8981_u53D1_u4E1C_u897F_u5230_u5BBF_u4E3B_u673A_uFF0C_u5927_u5BB6_u4E5F_u9047_u5230_u4E86_u865A_u62DF_u673Aping_u4E0D_u901A_u5BBF_u4E3B_u673A_u7684_u95EE_u9898_uFF0C_u5F53_u65F6_u5F88_u591A_u540C_u5B66_u662F_u78B0_u8FD0_u6C14_uFF0C_u6211_u4E5F_u4E0D_u8BB0_u5F97_u5F53_u65F6_u662F_u600E_u4E48_u89E3_u51B3_u7684_uFF0C_u73B0_u5728_u5C31_u628AVMware_u91CC_u9762_u7684_u4E00_u4E9B_u7F51_u7EDC_u914D_u7F6E_u4ED4_u7EC6_u5199_u4E00_u4E0B_u3002"><a href="#u4ECA_u5929_u6298_u817E_u865A_u62DF_u673A_u5404_u79CD_u7F51_u7EDC_u7684_u95EE_u9898_uFF0C_u7535_u8111_u4E5F_u662F_u8001_u5361_u6B7B_uFF0C_u607C_u706B_u6B7B_u4E86_uFF0C_u6691_u5047_u7684_u65F6_u5019_u53C2_u52A0_u5D4C_u5165_u5F0F_u57F9_u8BAD_u7684_u65F6_u5019_u7531_u4E8E_u8981_u53D1_u4E1C_u897F_u5230_u5BBF_u4E3B_u673A_uFF0C_u5927_u5BB6_u4E5F_u9047_u5230_u4E86_u865A_u62DF_u673Aping_u4E0D_u901A_u5BBF_u4E3B_u673A_u7684_u95EE_u9898_uFF0C_u5F53_u65F6_u5F88_u591A_u540C_u5B66_u662F_u78B0_u8FD0_u6C14_uFF0C_u6211_u4E5F_u4E0D_u8BB0_u5F97_u5F53_u65F6_u662F_u600E_u4E48_u89E3_u51B3_u7684_uFF0C_u73B0_u5728_u5C31_u628AVMware_u91CC_u9762_u7684_u4E00_u4E9B_u7F51_u7EDC_u914D_u7F6E_u4ED4_u7EC6_u5199_u4E00_u4E0B_u3002" class="headerlink" title="今天折腾虚拟机各种网络的问题，电脑也是老卡死，恼火死了，暑假的时候参加嵌入式培训的时候由于要发东西到宿主机，大家也遇到了虚拟机ping不通宿主机的问题，当时很多同学是碰运气，我也不记得当时是怎么解决的，现在就把VMware里面的一些网络配置仔细写一下。"></a>今天折腾虚拟机各种网络的问题，电脑也是老卡死，恼火死了，暑假的时候参加嵌入式培训的时候由于要发东西到宿主机，大家也遇到了虚拟机ping不通宿主机的问题，当时很多同学是碰运气，我也不记得当时是怎么解决的，现在就把VMware里面的一些网络配置仔细写一下。</h3><p>安装完虚拟机后，我们还可以在windows的<code>控制面板\网络和 Internet\网络连接</code>里面看到这样两个连接<br><img title="test" alt="来自七牛云的图片" class="class1" src="http://kangqingfei.qiniudn.com/blog/images/VM-network-link.png"><br>其中VMnet1是虚拟机Host-only模式的网络接口，VMnet8是NAT模式的网络接口，这些后面会介绍，查看他们两个的ip，可以发现VMnet1的ip是192.168.178.1，VMnet2的ip是192.168.254.1,。<br>打开一台虚拟机后，点击 <code>虚拟机 &gt; 设置 &gt; 网络适配器</code> 我们可以看到像下面这样的情况。<br><img title="test" alt="来自七牛云的图片" class="class1" src="http://kangqingfei.qiniudn.com/blog/images/VM-setting-network.png"><br>然而当我们在VMware里面 编辑 &gt; 虚拟网络编辑器 的时候却看到下面这个情况<br><img title="test" alt="来自七牛云的图片" class="class1" src="http://kangqingfei.qiniudn.com/blog/images/VM-virtual-network-editor.png"><br>其实这才是真实的情况，有三种连接的方式分别是 桥接模式，仅主机模式，NAT模式。接下来我们就一一解析这三种模式（PS：以下实验极有可能造成宽带断网之类的不良影响，并且确保你的电脑内存够大磁盘读写够快，否则容易造成电脑死机，由此引发一切后果概不承担。还有，在桥接模式下，别用putty之类的试图通过ssh连接虚拟机，会很卡卡卡卡，原因后面你会懂的）</p>
<ol>
<li><p>桥接模式。这是默认设置的模式（我的虚拟机版本是11.1.2 build-2780323），但是我使用这个模式的时候经常卡死，所以本着求知的精神打算看看它的拓扑结构，为了了解它的拓扑结构我们先进行一系列实验。为了排除不同的操作系统底层实现对实验带来的影响，我们开了3个虚拟机，分别是archlinux最新版，xp，ubuntu14.04，宿主机是win8.1，关闭所有机器的防火墙，尤其是xp。</p>
<p>之前都是接在学校的局域网上实验的，痛苦万分，受到小伙伴的提示，我把电脑接到一个普通的家庭无线路由器上，这样网络环境相对简单，按照VMware的说法在windows下是允许桥接无线网的。所以有下面这样的一个拓扑关系（顺便给出路由表）：</p>
<img title="test" alt="来自七牛云的图片" class="class1" src="http://kangqingfei.qiniudn.com/blog/images/VM-net-hometuop.png">
<img title="test" alt="来自七牛云的图片" class="class1" src="http://kangqingfei.qiniudn.com/blog/images/VM-net-route-table.png">
<p>首先看到他们的路由表：可以看到两台linux的虚拟机的路由表是一样的，有两条，第一条的意思是默认网关是192.168.1.1，第二条的意思是对于网络号是192.168.1.0/24 的目的ip的网关是0.0.0.0，不经过三层（代表直连路由，就是不要通过网关路由，直接下发到链路）。<br>实验结果表面上一切都和我们想的一样但是 <strong>出现一个重定向</strong> 这就值得我们怀疑了。实验过程如下：</p>
<ul>
<li><p>当我们用虚拟机ping win8的时候发现显示没有任何问题，但是经过抓包后遇到了下面的问题：</p>
<img title="test" alt="来自七牛云的图片" class="class1" src="http://kangqingfei.qiniudn.com/blog/images/VM-net-arch-ping-win8.png">
<p>可以看到这里的request报文的ip是没有问题的，但是mac是一样的，都是win8的mac，所以我们应该可以猜想，虚拟机其实不是真的暴露在局域网内，而是win8又建了一个小的”网络”，从上面的Archlinux的路由表可以看出，对于本网内的数据报直接广播没有不用经过路由，但是呢，arch的链路域是由win8 arch及其他的虚拟机组成的，所以呢Vmware应该有个进程(你看看你是不是装了Vmware bridge protocol)专门来收这种虚拟机的mac（原因详见我的另外一篇文章），Vmware的进程收到这些数据报之后会说这个发不得会出事，然后会不管三七二十一就把源mac改成宿主机（win8）的mac，然后通过真实的网卡下放到链路上（因为我们在真是的网卡上面确实捕捉到了这个数据包），这时的路由器就相当于一个二层交换机（因为数据报的通信双方的ip地址在同一网段），然后交换机一看这个数据报目的mac，你他喵的不就是你的么，所以又把这个数据报原封不动（因为没有路由所以源mac不变）返回给了我们的win8的真实网卡，然后Vmware又有一个进程(Vmware bridge protocol)相当于是给收到的数据报“路由”的（原因也很简单，以为发到这个mac地址的数据并不一定是给我的，我下面还有虚拟机，可能是他们的mac被改后发出去的数据报的响应）进过对比发现这个是给我的（就算不是也不能丢弃，还要看看目标mac是不是虚拟机的，是的话再看ip是不是对的上，都不是才丢弃），好的，处理后发现是个IP为111的发给我的，然后他不知道这个ip对应的mac，所以arp问，如下图：</p>
<img title="test" alt="来自七牛云的图片" class="class1" src="http://kangqingfei.qiniudn.com/blog/images/VM-net-arch-ping-win8-arp.png">
<p>问到了111的mac，所以发送一个reply报文（源mac是win8 的mac，目的mac是虚拟机的mac,就像上面的截图一样）给虚拟机，经过查询路由表之后发现，这个数据报应该直接下放到链路上，数据报就到了交换机这里，交换机收到这个数据报之后就看看这个目标mac是虚拟机的mac所以就把它发到了win8的接口上，win8一看，这个目的mac是个私有的mac不是我的扔掉吧，这时候虚拟机的守护进程跳出来，不能扔，这个可能是我们这边的，然后交给了虚拟机这边进程处理，然后一看mac地址不真是arch的mac地址么，好的下发给他。arch收到后上到三层一看这个ip不就对应着自己的ip么，好的收下了。</p>
</li>
<li><p>当我们用虚拟机ping 网关(.1)的时候发现出现了重定向的问题，如下图:</p>
<img title="test" alt="来自七牛云的图片" class="class1" src="http://kangqingfei.qiniudn.com/blog/images/VM-net-arch-ping-gate-redirect.png">
<p>按照百度的解释，这种问题出现的原因有两个：1)当路由器从某个接口收到数据还需要从相同接口转发该数据时；2)当路由器从某个接口到发往远程网络的数据时发现源ip地址与下一跳属于同一网段时。再仔细看看里面发给arch重定向要求的是win8的ip，所以可以肯定的是arch把数据报发到了win8的虚拟路由，然后win8的虚拟路由发现arch与目的ip是直达的，所以发出了重定向请求。这里我思考了很久，我一直在考虑的一个关键点是，到底这个和之前那个ping 宿主机会有什么区别，我们可以肯定这次肯定是经过路由了的（因为有redirect报文），而这就意味着之前的没有经过路由，可是为什么这次要路由之前不要，这里只有一点不同，那就是目的ip。这就意味着之前的目的ip是和虚拟机是同一链路域，而这次没有，可是这三个ip明明是同网段的啊，这里我们忽略了很重要的一点，对于家庭路由器来说，这三个ip肯定是同网段的，但是对于win8上那个虚拟路由来说就不是了，那个路由估计不会用子网掩码这种复杂的东西， <strong>它估计就是把宿主机和所有虚拟机的ip组成一个集合，在这个集合里面的就是同网段，反之就是不同网段需要路由</strong> 。所以这样就得出了我们的结果,由于目的ip（.1）不在虚拟路由的集合里面所以要进行路由（把源mac改成了win8真实的mac，目的mac由原来的win8的mac改成了家庭路由器的mac），然后发出去并发送一个重定向的数据报（源mac和目标mac都是win8的真实mac）到链路通知虚拟机重定向，接下来就和上面一样了。所以我们之前一直弄错的一点就是 <strong>我们的虚拟机的0.0.0.0网关其实是宿主机上的虚拟路由器</strong>。等到家庭路由收到</p>
</li>
<li>再来解释一些奇怪的现象，xp ping 网关不会出现重定向，这其实是因为windows系统没有显示重定向的报文（包括后面的DUP报文），如果你去抓包还是能够看到的。虚拟机互ping的话不会抓到任何数据，这是因为虚拟机通过虚拟的交换机连接在一起，所以除了第一次通信构造转发表时宿主机会受到报文，其他时候是收不到的。综上所述我们大概画出了下面的拓扑图：<img title="test" alt="来自七牛云的图片" class="class1" src="http://kangqingfei.qiniudn.com/blog/images/VM-net-virtual-actually.png">
</li>
</ul>
</li>
</ol>
<p>  上面这些都是我自己的猜想，能否拿来解决我们在校园网中遇到的问题呢？接下来我们就来看看校园网中的复杂情况吧。由于我们处在校园网内，所以可以再增加一个我们学校的bt down铺的主机。所以我们现在能够确定的（简化了核心交换机）拓扑信息如下：<br>  <img title="test" alt="来自七牛云的图片" class="class1" src="http://kangqingfei.qiniudn.com/blog/images/VM-net-tuop.png"></p>
<p>  然后用 ping 命令进行实验得到下面这样的结果：</p>
<ol>
<li>win8 ping 虚拟机，时而出现超时,一般时延小于1ms,有时时延极大。wireshark直接死掉，里面出现大量的重复request数据，request的ttl从1到128不等且多次重复出现，reply的ttl稳定128 而数量和request几乎相当，ping了4次出现了500万+条数据报。tracert要在本机的几点上重复跳不定次。</li>
<li>虚拟机 ping win8 ，对于xp时而出现超时,一般时延小于1ms,有时时延极大。对于linux 出现大量DUP! 提示，虚拟机卡死。wireshark由于中间按了停止所以，发现reply的ttl从128到90不等各种重复出现，request出现3条ttl都为64，同样在半路停止的情况下出现了50万+条的reply数据报。tracert只需一条。tracepath 无法到达。</li>
<li>linux ping btdown铺发现出现大量重定向和大量来自win8的数据报（这已经很明显地出现环路了），wireshark里面显示数据报依然有300万+大部分是重定向和来自bt down铺的reply，当时同学说bt down铺并没有异常。网络指示灯狂闪。。。</li>
<li>虚拟机互ping无异常，wireshark抓不到任何包，tracexx一跳就到。但是一旦关闭目标主机，出现大量重定向。。。</li>
<li><p>win8 ping bt down铺正常而且能抓到报文。</p>
<img title="test" alt="来自七牛云的图片" class="class1" src="http://kangqingfei.qiniudn.com/blog/images/VM-net0-result.png">
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u4ECA_u5929_u6298_u817E_u865A_u62DF_u673A_u5404_u79CD_u7F51_u7EDC_u7684_u95EE_u9898_uFF0C_u7535_u8111_u4E5F_u662F_u8001_u5361_u6B7B_]]>
    </summary>
    
      <category term="VMware" scheme="http://kangqingfei.cn/tags/VMware/"/>
    
      <category term="network" scheme="http://kangqingfei.cn/tags/network/"/>
    
      <category term="tips" scheme="http://kangqingfei.cn/categories/tips/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[windows note]]></title>
    <link href="http://kangqingfei.cn/2016/01/04/windows-note/"/>
    <id>http://kangqingfei.cn/2016/01/04/windows-note/</id>
    <published>2016-01-04T11:11:09.000Z</published>
    <updated>2016-01-18T12:47:06.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u8FD9_u7BC7_u6587_u7AE0_u4E3B_u8981_u662F_u7528_u6765_u8BB0_u5F55_u5728windows_u4F7F_u7528_u8FC7_u7A0B_u4E2D_u9047_u5230_u7684_u95EE_u9898_u53CA_u5176_u89E3_u51B3_u65B9_u6CD5_u7684_uFF0C_u6301_u7EED_u66F4_u65B0_u2026"><a href="#u8FD9_u7BC7_u6587_u7AE0_u4E3B_u8981_u662F_u7528_u6765_u8BB0_u5F55_u5728windows_u4F7F_u7528_u8FC7_u7A0B_u4E2D_u9047_u5230_u7684_u95EE_u9898_u53CA_u5176_u89E3_u51B3_u65B9_u6CD5_u7684_uFF0C_u6301_u7EED_u66F4_u65B0_u2026" class="headerlink" title="这篇文章主要是用来记录在windows使用过程中遇到的问题及其解决方法的，持续更新…"></a>这篇文章主要是用来记录在windows使用过程中遇到的问题及其解决方法的，持续更新…</h4><h5 id="u4ECA_u5929_u548C_u5C0F_u4F19_u4F34_u4E00_u8D77_u6253_u7B97_u505A_u4E2A_u4E1C_u897F_uFF0C_u7ED3_u679C_u53D1_u73B0_u4EE5_u524D_u642D_u8FC7_u7684_u73AF_u5883_uFF0C_u5373_u4F7F_u5728_u5F53_u65F6_u719F_u5230_u900F_u73B0_u5728_u5F88_u591A_u90FD_u5FD8_u4E86_uFF0C_u6240_u4EE5_u53D1_u73B0_u5199_u5199_u6587_u7AE0_u8FD8_u662F_u5FC5_u8981_u7684_u3002_u6240_u4EE5_u4ECE_u4ECA_u5929_u8D77_u4F1A_u5728_u8FD9_u7BC7_u6587_u7AE0_u4E2D_u8BB0_u5F55windows_u5E73_u53F0_u7684_u4E00_u4E9B_u4F7F_u7528_u3002_u7531_u4E8E_u4ECA_u5929_u5C0F_u4F19_u4F34_u8BF4_u4E3A_u4E86_u8FDEVPS_u4E0B_u4E86_u4E2Aputty_u7ED3_u679C_u4E2D_u4E86_u4E2A_u5168_u5BB6_u6876_uFF0C_uFF0C_uFF0C_uFF0C_uFF0C_u771F_u662F_u60B2_u50AC_uFF0C_u6240_u4EE5_u5C31_u4ECE_u547D_u4EE4_u884C_u5F00_u59CB_u5427_u3002"><a href="#u4ECA_u5929_u548C_u5C0F_u4F19_u4F34_u4E00_u8D77_u6253_u7B97_u505A_u4E2A_u4E1C_u897F_uFF0C_u7ED3_u679C_u53D1_u73B0_u4EE5_u524D_u642D_u8FC7_u7684_u73AF_u5883_uFF0C_u5373_u4F7F_u5728_u5F53_u65F6_u719F_u5230_u900F_u73B0_u5728_u5F88_u591A_u90FD_u5FD8_u4E86_uFF0C_u6240_u4EE5_u53D1_u73B0_u5199_u5199_u6587_u7AE0_u8FD8_u662F_u5FC5_u8981_u7684_u3002_u6240_u4EE5_u4ECE_u4ECA_u5929_u8D77_u4F1A_u5728_u8FD9_u7BC7_u6587_u7AE0_u4E2D_u8BB0_u5F55windows_u5E73_u53F0_u7684_u4E00_u4E9B_u4F7F_u7528_u3002_u7531_u4E8E_u4ECA_u5929_u5C0F_u4F19_u4F34_u8BF4_u4E3A_u4E86_u8FDEVPS_u4E0B_u4E86_u4E2Aputty_u7ED3_u679C_u4E2D_u4E86_u4E2A_u5168_u5BB6_u6876_uFF0C_uFF0C_uFF0C_uFF0C_uFF0C_u771F_u662F_u60B2_u50AC_uFF0C_u6240_u4EE5_u5C31_u4ECE_u547D_u4EE4_u884C_u5F00_u59CB_u5427_u3002" class="headerlink" title="今天和小伙伴一起打算做个东西，结果发现以前搭过的环境，即使在当时熟到透现在很多都忘了，所以发现写写文章还是必要的。所以从今天起会在这篇文章中记录windows平台的一些使用。由于今天小伙伴说为了连VPS下了个putty结果中了个全家桶，，，，，真是悲催，所以就从命令行开始吧。"></a>今天和小伙伴一起打算做个东西，结果发现以前搭过的环境，即使在当时熟到透现在很多都忘了，所以发现写写文章还是必要的。所以从今天起会在这篇文章中记录windows平台的一些使用。由于今天小伙伴说为了连VPS下了个putty结果中了个全家桶，，，，，真是悲催，所以就从命令行开始吧。</h5><ol>
<li><h3 id="u5728windows_u4E0B_u4F7F_u7528_u547D_u4EE4_u884C_u3002"><a href="#u5728windows_u4E0B_u4F7F_u7528_u547D_u4EE4_u884C_u3002" class="headerlink" title="在windows下使用命令行。"></a>在windows下使用命令行。</h3><ol>
<li><h4 id="babun_u3002_u4ECA_u5929_u5728_u5C0F_u4F19_u4F34_u7684_u7535_u8111_u4E0A_u4F7F_u7528_u4E00_u4E2A_u4E0D_u77E5_u540D_u7684_u7EC8_u7AEF_u7B80_u76F4_u96BE_u7528_u6B7B_u4E86_uFF0C_u8FDEBackspace_u90FD_u4E0D_u80FD_u4F7F_uFF08_u6211_u80AF_u5B9A_u5728vim_u91CC_u9762_u914D_u4E86_u7684_uFF0C_u4F30_u8BA1_u662F_u5F00_u53D1_u8005_u5077_u61D2_u6CA1_u6709_u5B9A_u4E49_u4E00_u90E8_u5206_u5B8F_uFF09_uFF0Cvim_u63D0_u793A_u4E5F_u6CA1_u6709_uFF0C_u8FD8_u4E00_u5361_u4E00_u5361_u7684_uFF0C_u7B80_u76F4_u4E0D_u80FD_u5FCD_uFF0C_u5BF9_u6BD4_u6211_u7684babun_uFF0C_u5404_u79CD_u517C_u5BB9_uFF0C_u6240_u4EE5_u7B2C_u4E00_u4E2A_u63A8_u8350_u5927_u5BB6_u4F7F_u7528_u7684_u5C31_u662F_u5B83_u4E86_u3002_u6211_u662F_u505A_u85AA_u706B_u676F_u7684_u65F6_u5019_u88C5_u7684_u4E86_u90FD_u5FD8_u8BB0_u4E86_uFF0C_u6240_u4EE5_u53C2_u8003_u4E86_u7F51_u4E0A_u7684_u4E00_u4E9B_u6587_u7AE0_u3002_u521A_u597D_u628A_u5B83_u5378_u8F7D_uFF08_u5C31_u662F_u628A-babun__u6587_u4EF6_u5939_u5168_u5220_u4E86_3A_29__uFF09_u4E86_uFF0C_u91CD_u65B0_u914D_u4E00_u4E0B_u3002"><a href="#babun_u3002_u4ECA_u5929_u5728_u5C0F_u4F19_u4F34_u7684_u7535_u8111_u4E0A_u4F7F_u7528_u4E00_u4E2A_u4E0D_u77E5_u540D_u7684_u7EC8_u7AEF_u7B80_u76F4_u96BE_u7528_u6B7B_u4E86_uFF0C_u8FDEBackspace_u90FD_u4E0D_u80FD_u4F7F_uFF08_u6211_u80AF_u5B9A_u5728vim_u91CC_u9762_u914D_u4E86_u7684_uFF0C_u4F30_u8BA1_u662F_u5F00_u53D1_u8005_u5077_u61D2_u6CA1_u6709_u5B9A_u4E49_u4E00_u90E8_u5206_u5B8F_uFF09_uFF0Cvim_u63D0_u793A_u4E5F_u6CA1_u6709_uFF0C_u8FD8_u4E00_u5361_u4E00_u5361_u7684_uFF0C_u7B80_u76F4_u4E0D_u80FD_u5FCD_uFF0C_u5BF9_u6BD4_u6211_u7684babun_uFF0C_u5404_u79CD_u517C_u5BB9_uFF0C_u6240_u4EE5_u7B2C_u4E00_u4E2A_u63A8_u8350_u5927_u5BB6_u4F7F_u7528_u7684_u5C31_u662F_u5B83_u4E86_u3002_u6211_u662F_u505A_u85AA_u706B_u676F_u7684_u65F6_u5019_u88C5_u7684_u4E86_u90FD_u5FD8_u8BB0_u4E86_uFF0C_u6240_u4EE5_u53C2_u8003_u4E86_u7F51_u4E0A_u7684_u4E00_u4E9B_u6587_u7AE0_u3002_u521A_u597D_u628A_u5B83_u5378_u8F7D_uFF08_u5C31_u662F_u628A-babun__u6587_u4EF6_u5939_u5168_u5220_u4E86_3A_29__uFF09_u4E86_uFF0C_u91CD_u65B0_u914D_u4E00_u4E0B_u3002" class="headerlink" title="babun。今天在小伙伴的电脑上使用一个不知名的终端简直难用死了，连Backspace都不能使（我肯定在vim里面配了的，估计是开发者偷懒没有定义一部分宏），vim提示也没有，还一卡一卡的，简直不能忍，对比我的babun，各种兼容，所以第一个推荐大家使用的就是它了。我是做薪火杯的时候装的了都忘记了，所以参考了网上的一些文章。刚好把它卸载（就是把.babun 文件夹全删了:) ）了，重新配一下。"></a><strong><em>babun</em></strong>。今天在小伙伴的电脑上使用一个不知名的终端简直难用死了，连Backspace都不能使（我肯定在vim里面配了的，估计是开发者偷懒没有定义一部分宏），vim提示也没有，还一卡一卡的，简直不能忍，对比我的babun，各种兼容，所以第一个推荐大家使用的就是它了。我是做薪火杯的时候装的了都忘记了，所以参考了网上的一些文章。刚好把它卸载（就是把.babun 文件夹全删了:) ）了，重新配一下。</h4><ol>
<li>关于babun。 介绍就自己去<a href="http://babun.github.io/" target="_blank" rel="external">babun的官网</a>看了,反正很好用，之前我装的时候谷歌搜不到几篇文章现在一搜就是一把。</li>
<li>安装。官网下载安装包<code>babun-1.2.0-dist</code>，然后找个地方解压了，你会发现里面有个<code>install.txt</code>,里面写着<code>In order to install babun just run the install.bat script</code>意思是你直接点install.bat 就是了，他会默认安装到<code>C:/Users/xxx/.babun</code>下面就是我之前直接删除的那个目录，然后里面还有一句是这样的<code>To install in a different directory, just use the /t switch (or /target) e.g install.bat /t &quot;D:\target_folder&quot;</code>意思是你可以自己指定安装目录（安装目录不要有空格），这应该是新版本的特性，对于我这种对电脑每个文件的作用都想了如指掌的人来说当然是极好的。所以我在解压的文件夹下面打开命令行，<code>install.bat /t &quot;C:\ProgramFiles\babun&quot;</code>然后就开始安装了，会输出一系列的信息，最后会在.babun文件夹生成在我们刚刚指定的目录下面，里面就是我们的babun了，进去.babun,里面有个<code>babun.bat</code>双击它就可以运行了（安装完也会自动弹出并生成快捷方式）然后把它固定到开始菜单吧 :)，新版本里面还有<code>uninstall.bat</code>再也不用手动删目录了，另外新版本还增加了<code>Now you can open babun directly in any folder by right clicking your mouse and choosing the Open Babun here option.</code>就是你可以在任何文件夹上右击打开babun 。</li>
<li>个性化。首先修改颜色，你在标题栏右击，然后options，里面可以设置，初始的背景色是<code>E:160 S:0 L:26 R:28 G:28 B:28</code>我把它改成<code>E:239 S:74 L:60 R:83 G:44 B:45</code>，同样的前景色初始是<code>E:160 S:0 L:196 R:208 G:208 B:208</code>把它改成<code>E:68 S:232 L:120 R:79 G:251 B:4</code>，把透明度改成<code>low</code>，把光标改成<code>underscope</code>，把窗口改成120x50（Alt+F11可以全屏），把字体改成Courier new。接下来就是中文乱码的问题，这个问题困扰了我很久，网上大多数的解决方法是把编码改成gbk，然后终端会出现一个禄字替换就是了，这样的话使用cmd的一些命令（ipconfig、nslookup）就不会出现中文乱码，但这样的话如果有中文名的文件ls的时候就会乱码了（不改前是不会的），可能是鱼和熊掌不可得兼吧。我还是最终选用了前一种，毕竟我要在命令行里处理中文名的文件的概率极小。然后是去除那个禄字见<a href="http://0x0d.im/archives/windows-build-linux-like-environment.html" target="_blank" rel="external">参考的方法</a>，另外附上一个<a href="https://prinzeugen.net/customize-zsh-prompt/#more-1884" target="_blank" rel="external">修改ZSH主题的方法</a>。</li>
<li>安装软件。接下来就可以自行安装软件了，在这之前你可以先修改一下源<code>vim ~/.pact/pact.repo</code>，把<code>#PACT_REPO=http://mirrors.kernel.org/sourceware/cygwin/</code> 修改成<code>PACT_REPO=http://mirrors.163.com/cygwin/</code> 我修改后貌似会出现MD5校验错误，这个自己看着办，其实官方的源也挺快的。babun的包管理和ubuntu的很像，就是一个<code>pact</code>命令，你输入这个命令后他就会告诉你怎么用了。下面是网上给出的一些常用软件，另外像<code>autojump colored-man zsh_reload zsh-syntax-highlighting git git-flow ruby gem python pip node npm bower</code>这些插件参见后面的 <strong>Babun 配置</strong> 这篇文章里面写的很详细。<blockquote>
<p>pact install tmux        #安装tmux<br>pact install screen      #安装screen 有了这两个不用conEmu也可以了<br>pact install zip         #安装zip<br>pact install lftp        #lftp命令<br>pact install p7zip       # p7zip命令<br>pact install connect-proxy # 基于openssh的socks https代理<br>pact install util-linux    #安装linux基础命令行工具 more/col/whereis等等命令<br>pact install bind-utils    #安装dig命令<br>pact install inetutils     #安装Telnet等常用网络命令<br>pact install python        #python环境<br>pact install python-crypto #python 环境</p>
</blockquote>
</li>
<li>使用Conemu。自己在<a href="https://conemu.github.io/" target="_blank" rel="external">官网</a>下载然后安装，安装好后参考 <strong>windows下搭建类linux环境</strong> 进行配置并进行一下个性化设置即可。</li>
<li>使用tmux/screen 这两货略微复杂，很有必要拿出一篇单独的文章来讲，这里可以先参考那两篇关于tmux的文章。</li>
</ol>
<p>参考文章：<br><a href="http://blog.yuanbin.me/posts/2015/07/Dev-Environment-in-Windows.html" target="_blank" rel="external">Windows 系统下的开发环境搭建</a><br><a href="http://www.rxna.cn/post/wiki/babun-pei-zhi" target="_blank" rel="external">Babun 配置</a><br><a href="https://www.52os.net/articles/windows-install-unix-like-command-tools.html" target="_blank" rel="external">windows下搭建类linux环境</a><br><a href="http://foocoder.com/blog/zhong-duan-huan-jing-zhi-tmux.html/" target="_blank" rel="external">终端环境之tmux</a><br><a href="http://blog.jobbole.com/87278/" target="_blank" rel="external">Tmux 入门介绍</a></p>
</li>
<li><h4 id="msys2_u3002"><a href="#msys2_u3002" class="headerlink" title="msys2。"></a><strong><em>msys2</em></strong>。</h4></li>
</ol>
</li>
<li>软件安装破解激活<ol>
<li>Adobe Acrobat XI Pro 提示试用到期。解决方法禁止其license 管理软件联网<code>C:\Program Files (x86)\Common Files\Adobe\OOBE\PDApp\core\PDapp.exe</code>。在防火墙中新建出站规则，针对所有的网络都禁止。</li>
<li>msi 文件权限问题，使用msiexec命令 <code>E:\preparProgram&gt;msiexec /package python-2.7.8.msi</code></li>
<li>狂野飙车8的游戏记录文件：<code>C:\Users\kqf\AppData\Local\Packages\GAMELOFTSA.Asphalt8Airborne_0pp20fcewvvtj\LocalState\profile|localprofile</code></li>
</ol>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u8FD9_u7BC7_u6587_u7AE0_u4E3B_u8981_u662F_u7528_u6765_u8BB0_u5F55_u5728windows_u4F7F_u7528_u8FC7_u7A0B_u4E2D_u9047_u5230_u7684_u95EE]]>
    </summary>
    
      <category term="note" scheme="http://kangqingfei.cn/tags/note/"/>
    
      <category term="windows" scheme="http://kangqingfei.cn/tags/windows/"/>
    
      <category term="tips" scheme="http://kangqingfei.cn/categories/tips/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu note]]></title>
    <link href="http://kangqingfei.cn/2016/01/03/ubuntu-note/"/>
    <id>http://kangqingfei.cn/2016/01/03/ubuntu-note/</id>
    <published>2016-01-03T08:13:54.000Z</published>
    <updated>2016-01-04T11:13:24.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u8FD9_u7BC7_u6587_u7AE0_u4E3B_u8981_u662F_u7528_u6765_u8BB0_u5F55_u5728ubuntu_u4F7F_u7528_u8FC7_u7A0B_u4E2D_u9047_u5230_u7684_u95EE_u9898_u53CA_u5176_u89E3_u51B3_u65B9_u6CD5_u7684_uFF0C_u6301_u7EED_u66F4_u65B0_u2026"><a href="#u8FD9_u7BC7_u6587_u7AE0_u4E3B_u8981_u662F_u7528_u6765_u8BB0_u5F55_u5728ubuntu_u4F7F_u7528_u8FC7_u7A0B_u4E2D_u9047_u5230_u7684_u95EE_u9898_u53CA_u5176_u89E3_u51B3_u65B9_u6CD5_u7684_uFF0C_u6301_u7EED_u66F4_u65B0_u2026" class="headerlink" title="这篇文章主要是用来记录在ubuntu使用过程中遇到的问题及其解决方法的，持续更新…"></a>这篇文章主要是用来记录在ubuntu使用过程中遇到的问题及其解决方法的，持续更新…</h3><ol>
<li>ubuntu 的源</li>
<li>ubuntu 中一些软件的源<ul>
<li>nginx： <code>sudo add-apt-repository ppa:nginx/stable</code></li>
<li>nodejs</li>
<li>atom</li>
<li>lll</li>
</ul>
</li>
<li>禁用（启用）一些软件的更新</li>
<li>定时任务备份自己的命令历史以待以后查阅</li>
<li>一些常见的配置文件<ul>
<li>DNS 配置文件：/etc/resolv.conf</li>
<li>主机名： /etc/hostname</li>
<li>DigitalOcean 的主机，装有两个版本的Python，如果命令行Python版本错误，应该修改 <code>/usr/local/bin</code> 里面的Python，而如果因为Python版本不对导致dpkg报错的话应该修改<code>/usr/bin</code>里面的Python。</li>
<li>kk</li>
</ul>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u8FD9_u7BC7_u6587_u7AE0_u4E3B_u8981_u662F_u7528_u6765_u8BB0_u5F55_u5728ubuntu_u4F7F_u7528_u8FC7_u7A0B_u4E2D_u9047_u5230_u7684_u95EE_]]>
    </summary>
    
      <category term="note" scheme="http://kangqingfei.cn/tags/note/"/>
    
      <category term="ubuntu" scheme="http://kangqingfei.cn/tags/ubuntu/"/>
    
      <category term="tips" scheme="http://kangqingfei.cn/categories/tips/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[my git note]]></title>
    <link href="http://kangqingfei.cn/2015/12/31/my-git-note/"/>
    <id>http://kangqingfei.cn/2015/12/31/my-git-note/</id>
    <published>2015-12-31T15:47:42.000Z</published>
    <updated>2016-01-18T12:50:34.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u4ECE13_u5E74_u63A5_u89E6git_u5230_u73B0_u5728_u5DF2_u7ECF_u4E24_u5E74_u534A_u4E86_uFF0C_u4ECD_u7136_u4E0D_u80FD_u5F88_u719F_u7EC3_u7684_u4F7F_u7528_uFF0C_u9047_u5230_u9EBB_u70E6_u7684_u95EE_u9898_u8FD8_u8981_u5728_u7F51_u4E0A_u641C_u547D_u4EE4_uFF0C_u867D_u7136_u4EE5_u524D_u6709_u5728_u672C_u5B50_u4E0A_u5199_u7B14_u8BB0_uFF0C_u4F46_u662F_u8C01_u6CA1_u4E8B_u5E26_u672C_u672C_u5B50_u554A_uFF0C_u6240_u4EE5_u5728_u8FD9_u91CC_u603B_u7ED3_u4E00_u4E0Bgit_u7684_u4F7F_u7528_u3002"><a href="#u4ECE13_u5E74_u63A5_u89E6git_u5230_u73B0_u5728_u5DF2_u7ECF_u4E24_u5E74_u534A_u4E86_uFF0C_u4ECD_u7136_u4E0D_u80FD_u5F88_u719F_u7EC3_u7684_u4F7F_u7528_uFF0C_u9047_u5230_u9EBB_u70E6_u7684_u95EE_u9898_u8FD8_u8981_u5728_u7F51_u4E0A_u641C_u547D_u4EE4_uFF0C_u867D_u7136_u4EE5_u524D_u6709_u5728_u672C_u5B50_u4E0A_u5199_u7B14_u8BB0_uFF0C_u4F46_u662F_u8C01_u6CA1_u4E8B_u5E26_u672C_u672C_u5B50_u554A_uFF0C_u6240_u4EE5_u5728_u8FD9_u91CC_u603B_u7ED3_u4E00_u4E0Bgit_u7684_u4F7F_u7528_u3002" class="headerlink" title="从13年接触git到现在已经两年半了，仍然不能很熟练的使用，遇到麻烦的问题还要在网上搜命令，虽然以前有在本子上写笔记，但是谁没事带本本子啊，所以在这里总结一下git的使用。"></a>从13年接触git到现在已经两年半了，仍然不能很熟练的使用，遇到麻烦的问题还要在网上搜命令，虽然以前有在本子上写笔记，但是谁没事带本本子啊，所以在这里总结一下git的使用。</h3><h4 id="u9996_u5148git_u662F_u4E00_u4E2A_u5F88_u6709_u540D_u7684_u7248_u672C_u63A7_u5236_u7CFB_u7EDF_uFF0C_u4E00_u5F00_u59CB_u63A5_u89E6_uFF08github_uFF09_u7684_u65F6_u5019_uFF0C_u6211_u4EE5_u4E3A_u5B83_u53EA_u662F_u4E00_u4E2A_u7528_u6765_u627E_u4EE3_u7801_u7684_u5730_u65B9_uFF0C_u5F53_u65F6_u8981_u548C_u5B66_u957F_u5728_u90A3_u91CC_u641E_u4E86_u534A_u5929_u624D_u628A_u4EE3_u7801_u4E0A_u4F20_u5230github_uFF0C_u60F3_u60F3_u771F_u662F_u8270_u8F9B_u3002github_u53C8_u79F0gayhub_u662F_u4F7F_u7528git_u8BA9_u4F60_u514D_u8D39_u6258_u7BA1_u4EE3_u7801_uFF08_u5C31_u50CF_u8FD9_u7BC7_u535A_u5BA2_u7684html_u4EE3_u7801_uFF09_u7684_u5730_u65B9_uFF08_u56FD_u5185_u4E5F_u6709_u7C7B_u4F3C_u7684Coding-net__uFF09_uFF0C_u76F8_u5F53_u4E8E_u662F_u4E00_u4E2A_u8FDC_u7A0B_u7684_u4ED3_u5E93_u3002gitlab_u662F_u4E00_u4E2A_u4F7F_u7528git_u7684_u5F00_u6E90_u7684_u5DE5_u5177_uFF0C_u53EF_u4EE5_u8BA9_u4F60_u642D_u5EFA_u8D77_u7C7B_u4F3Cgithub_u8FD9_u6837_u7684_u73AF_u5883_u3002"><a href="#u9996_u5148git_u662F_u4E00_u4E2A_u5F88_u6709_u540D_u7684_u7248_u672C_u63A7_u5236_u7CFB_u7EDF_uFF0C_u4E00_u5F00_u59CB_u63A5_u89E6_uFF08github_uFF09_u7684_u65F6_u5019_uFF0C_u6211_u4EE5_u4E3A_u5B83_u53EA_u662F_u4E00_u4E2A_u7528_u6765_u627E_u4EE3_u7801_u7684_u5730_u65B9_uFF0C_u5F53_u65F6_u8981_u548C_u5B66_u957F_u5728_u90A3_u91CC_u641E_u4E86_u534A_u5929_u624D_u628A_u4EE3_u7801_u4E0A_u4F20_u5230github_uFF0C_u60F3_u60F3_u771F_u662F_u8270_u8F9B_u3002github_u53C8_u79F0gayhub_u662F_u4F7F_u7528git_u8BA9_u4F60_u514D_u8D39_u6258_u7BA1_u4EE3_u7801_uFF08_u5C31_u50CF_u8FD9_u7BC7_u535A_u5BA2_u7684html_u4EE3_u7801_uFF09_u7684_u5730_u65B9_uFF08_u56FD_u5185_u4E5F_u6709_u7C7B_u4F3C_u7684Coding-net__uFF09_uFF0C_u76F8_u5F53_u4E8E_u662F_u4E00_u4E2A_u8FDC_u7A0B_u7684_u4ED3_u5E93_u3002gitlab_u662F_u4E00_u4E2A_u4F7F_u7528git_u7684_u5F00_u6E90_u7684_u5DE5_u5177_uFF0C_u53EF_u4EE5_u8BA9_u4F60_u642D_u5EFA_u8D77_u7C7B_u4F3Cgithub_u8FD9_u6837_u7684_u73AF_u5883_u3002" class="headerlink" title="首先git是一个很有名的版本控制系统，一开始接触（github）的时候，我以为它只是一个用来找代码的地方，当时要和学长在那里搞了半天才把代码上传到github，想想真是艰辛。github又称gayhub是使用git让你免费托管代码（就像这篇博客的html代码）的地方（国内也有类似的Coding.net ），相当于是一个远程的仓库。gitlab是一个使用git的开源的工具，可以让你搭建起类似github这样的环境。"></a>首先git是一个很有名的版本控制系统，一开始接触（github）的时候，我以为它只是一个用来找代码的地方，当时要和学长在那里搞了半天才把代码上传到github，想想真是艰辛。github又称gayhub是使用git让你免费托管代码（就像这篇博客的html代码）的地方（国内也有类似的<a href="https://coding.net/" target="_blank" rel="external">Coding.net</a> ），相当于是一个远程的仓库。gitlab是一个使用git的开源的工具，可以让你搭建起类似github这样的环境。</h4><h4 id="u600E_u4E48_u5B66_u4E60git_3F_u9996_u5148_u63A8_u8350_u4E00_u4E2A_u53EF_u89C6_u5316_u5B66_u4E60git_u7684_u7F51_u7AD9_uFF0C_u8FD9_u4E2A_u7F51_u7AD9_u57FA_u672C_u4E0A_u8986_u76D6_u4E86_u5E38_u7528_u7684_u547D_u4EE4_uFF0C_u800C_u4E14_u975E_u5E38_u5F62_u8C61_u751F_u52A8_uFF0C_u5199_u8FD9_u7BC7_u6587_u7AE0_u4E4B_u524D_u6211_u4E5F_u662F_u628A_u91CC_u9762_u7684_u6240_u6709level_u8FC7_u4E86_u4E00_u904D_u3002_u518D_u8005_u5C31_u662F_u770B_u4E00_u4E9B_u535A_u5BA2_uFF0C_u5C31_u50CF_u6211_u4E0B_u9762_u9644_u4E0A_u7684_u962E_u8001_u5E08_u7684_u535A_u5BA2_u3002_u5982_u679C_u60F3_u5F88_u7CFB_u7EDF_u5730_u4E86_u89E3_u7684_u8BDD_u53EF_u4EE5_u770B_u770B_u4E66_uFF0C_u6BD4_u8F83_u6709_u540D_u7684_u6709progit_uFF0C_u56E0_u4E3Agit_u63A8_u51FA_u4E862-0_u7248_u672C_uFF0C_u6240_u4EE5_u4E5F_u5C31_u6709_u4E86progit2-zh_uFF0C_u76F8_u5173_u7684_u4E66_u8FD8_u6709_uFF1A"><a href="#u600E_u4E48_u5B66_u4E60git_3F_u9996_u5148_u63A8_u8350_u4E00_u4E2A_u53EF_u89C6_u5316_u5B66_u4E60git_u7684_u7F51_u7AD9_uFF0C_u8FD9_u4E2A_u7F51_u7AD9_u57FA_u672C_u4E0A_u8986_u76D6_u4E86_u5E38_u7528_u7684_u547D_u4EE4_uFF0C_u800C_u4E14_u975E_u5E38_u5F62_u8C61_u751F_u52A8_uFF0C_u5199_u8FD9_u7BC7_u6587_u7AE0_u4E4B_u524D_u6211_u4E5F_u662F_u628A_u91CC_u9762_u7684_u6240_u6709level_u8FC7_u4E86_u4E00_u904D_u3002_u518D_u8005_u5C31_u662F_u770B_u4E00_u4E9B_u535A_u5BA2_uFF0C_u5C31_u50CF_u6211_u4E0B_u9762_u9644_u4E0A_u7684_u962E_u8001_u5E08_u7684_u535A_u5BA2_u3002_u5982_u679C_u60F3_u5F88_u7CFB_u7EDF_u5730_u4E86_u89E3_u7684_u8BDD_u53EF_u4EE5_u770B_u770B_u4E66_uFF0C_u6BD4_u8F83_u6709_u540D_u7684_u6709progit_uFF0C_u56E0_u4E3Agit_u63A8_u51FA_u4E862-0_u7248_u672C_uFF0C_u6240_u4EE5_u4E5F_u5C31_u6709_u4E86progit2-zh_uFF0C_u76F8_u5173_u7684_u4E66_u8FD8_u6709_uFF1A" class="headerlink" title="怎么学习git?首先推荐一个可视化学习git的网站，这个网站基本上覆盖了常用的命令，而且非常形象生动，写这篇文章之前我也是把里面的所有level过了一遍。再者就是看一些博客，就像我下面附上的阮老师的博客。如果想很系统地了解的话可以看看书，比较有名的有progit，因为git推出了2.0版本，所以也就有了progit2-zh，相关的书还有："></a>怎么学习git?首先推荐一个<a href="http://pcottle.github.io/learnGitBranching/" target="_blank" rel="external">可视化学习git</a>的网站，这个网站基本上覆盖了常用的命令，而且非常形象生动，写这篇文章之前我也是把里面的所有level过了一遍。再者就是看一些博客，就像我下面附上的阮老师的博客。如果想很系统地了解的话可以看看书，比较有名的有progit，因为git推出了2.0版本，所以也就有了<a href="https://github.com/progit/progit2-zh" target="_blank" rel="external">progit2-zh</a>，相关的书还有：</h4><ul>
<li><code>Manning.Learn.Git.in.a.Month.of.Lunches.2015.9.pdf</code>  </li>
<li><code>O&#39;Reilly.Git.for.Teams.2015.8.pdf</code></li>
<li><code>OReilly.Introducing.GitHub.2014.11.pdf</code>  </li>
<li><code>Manning.Git.in.Practice.2014.9.pdf</code>  </li>
<li><code>[Git.Pocket.Guide(2013.6)].Richard.E.Silverman.文字版.pdf</code></li>
<li><code>[Version.Control.with.Git(2nd,2012.8)].Jon.Loeliger.文字版.pdf</code>  </li>
<li><code>[Pragmatic.Guide.to.Git(2010.11)].Travis.Swicegood.文字版.pdf</code></li>
</ul>
<h4 id="u6211_u5217_u51FA_u7684_u5927_u90FD_u662F_u82F1_u6587_u7684_uFF0C_u800C_u4E14_u6709_u70B9_u591A_uFF0C_u6211_u4E5F_u6CA1_u770B_u8FC7_uFF0C_u4E5F_u4E0D_u77E5_u9053_u54EA_u672C_u597D_uFF0C_u53EF_u4EE5_u81EA_u5DF1_u770B_u770B_u9009_u62E9_u4E00_u4E0B_u3002"><a href="#u6211_u5217_u51FA_u7684_u5927_u90FD_u662F_u82F1_u6587_u7684_uFF0C_u800C_u4E14_u6709_u70B9_u591A_uFF0C_u6211_u4E5F_u6CA1_u770B_u8FC7_uFF0C_u4E5F_u4E0D_u77E5_u9053_u54EA_u672C_u597D_uFF0C_u53EF_u4EE5_u81EA_u5DF1_u770B_u770B_u9009_u62E9_u4E00_u4E0B_u3002" class="headerlink" title="我列出的大都是英文的，而且有点多，我也没看过，也不知道哪本好，可以自己看看选择一下。"></a>我列出的大都是英文的，而且有点多，我也没看过，也不知道哪本好，可以自己看看选择一下。</h4><ol>
<li><p>git 术语。首先先讲一下git的一些术语，参考了阮老师的博客，大概是</p>
<ul>
<li>Workspace：工作区，就是当前工作目录的内容</li>
<li>Index / Stage：暂存区，就是被git管理的当前的工作区的内容</li>
<li>Repository：仓库区（或本地仓库），就是暂存区的内容保存的地方</li>
<li>Remote：远程仓库 ，就是协同开发的时候多个开发者一起维护的仓库</li>
<li>快照，就是一系列的提交构成的仓库的一个版本</li>
<li>检出，就是复制某一快照然后新建一个分支</li>
<li>hashValue，git用哈希值来表示一个快照，hashValue一般很长，我们使用的话一般取4位（前面）及以上就可以了。</li>
<li>HEAD，指向当前工作快照的一个指针类似的，一般指向当前分支，也可分离指向hash值代表的快照</li>
</ul>
</li>
<li><p>config &amp; help</p>
<ul>
<li>首先使用git时你可能要配置一些个人信息，特别是使用github，如果没有得到认证授权将会受到速率方面的一些限制，所以需要配置个人信息。还有就是编辑器方面的配置，</li>
<li><code>git config --list</code> 来查看我们的一些配置信息</li>
<li><code>git config --global --user.name=name</code> 配置用户名</li>
<li><code>git config --global --user.email=name@xxx.xxx</code> 配置用户邮箱</li>
<li><code>git config --global core.editor &quot;gedit -s&quot;</code> -s 的意思是将gedit作为一个的单独的窗口打开</li>
<li>我们还可以直接修改.git文件夹下的config文件来配置git。</li>
<li>通过<code>git help</code>来获得帮助，通过<code>git help command</code>来获得具体命令的帮助，在windows中可能会打开html文档，或与之关联的浏览器，在那里你可以获得所有的帮助信息。</li>
</ul>
</li>
<li><p>init &amp; clone &amp; rm &amp; mv &amp; ls-files</p>
<ul>
<li><code>git init</code> 新建一个git仓库</li>
<li><p><code>git clone URL DIR</code> 克隆一个仓库，URL可以是http(s)、ssh、ftp、等链接协议，-o <name>可以配置远程追踪的仓库(默认origin)，-b <name> 可以指定克隆的分支（默认是HEAD指向的分支）–depth <depth> 可以指定克隆的深度，这对于很多提交的仓库可以大大减小它的大小</depth></name></name></p>
</li>
<li><p><code>git rm &lt;file&gt;</code> 将文件移出暂存区，支持正则。</p>
</li>
<li><code>git mv &lt;file&gt; &lt;source&gt; &lt;destination&gt;</code> 移动或是重命名文件</li>
<li><code>git ls-files</code> 命令的选项有–cached|deleted|others|ignored|stage|unmerged|killed|modified，对应的简化命令有-[c|d|o|i|s|u|k|m]</li>
</ul>
</li>
<li><p>add &amp; commit</p>
<ul>
<li><code>git add &lt;file&gt;</code> 添加文件，可以只用简单的正则进行匹配</li>
<li><code>git add -A(all)</code> 来添加所有的文件。</li>
<li><code>git commit -a -m &quot;msg&quot;</code> -a 表示将所有修改或删除的文件添加到暂存区，-m表示本次修改的提示信息</li>
<li><code>git commit --amend</code> 可以用来修改最近一次提交的注释信息，但是一旦你更新到远程仓库这个命令就不管用了。</li>
</ul>
</li>
<li><p>branch &amp; checkout</p>
<ul>
<li>branch 用来创建、查看、删除分支。</li>
<li><code>git branch branchName</code> 创建一个新的分支。</li>
<li><code>git branch</code> 查看当前分支，-a可以列出所有分支信息，包括远程的分支。</li>
<li><code>git branch -d|-D</code> 用来删除或是强制删除一个分支，可以使用-r表示对远程分支进行操作</li>
<li><code>git branch -u origin/master foo</code>  设置远程分支与本地分支的映射关系</li>
<li><code>git branch -f master HEAD~3</code>（强制）移动 master 指向 HEAD 的第3级父提交（注意可能会丢失当前分支的所有更改）,也可以理解为将HEAD~3命名为master即使是master已经存在</li>
<li><code>git checkout branchName &lt;remote&gt;/&lt;branch&gt;</code> -b 可以用于在目标分支不存在时新建一个分支然后切换 -t|–track <remote>/<branch> 用于设置该分支所追踪的远程分支，默认设置远程同名分支为追踪分支</branch></remote></li>
</ul>
</li>
<li><p>log &amp; reflog &amp; status &amp; show</p>
<ul>
<li>log 用来查看16进制标识的每次提交的版本号（hash 值），使用hash值得时候你只需要输入前面几个字符就好（一般至少用4个），这个命令比较复杂，具体可以去看帮助文档，主要是一些输出的格式和显示问题，下面列出常用的格式化输出方式</li>
<li><code>git log --all --decorate --graph --oneline</code> –decorate 会显示出tag信息，–graph 可以图形化地表示出分支合并历史， –oneline 每条log只显示一行</li>
<li>还有其他的显示设置，包括时间、作者、关键词的筛选，以及一些变量的使用。</li>
<li>git reflog 可以查看所有分支的所有操作记录（包括（包括commit和reset的操作），包括已经被删除的commit记录，git log则不能察看已经删除了的commit记录，也就是说git reflog列出了head曾经指向过的一系列commit。要明白它们只存在于你本机中；而不是你的版本仓库的一部分，也不包含在push和merge操作中。</li>
<li>对于大型的仓库，通常用<code>git fsck --lost-found</code>（文件系统检测）来找回丢失的提交，git fsck 相对reflog是有优势的。比方说你删除一个远程的分支然后关闭仓库。 用fsck 你可以搜索和恢复已删除的远程分支。</li>
<li><code>git status</code> 用于显示工作区的当前状态，包括哪些文件没有被提交，以及哪些文件没有纳入版本库管理。</li>
<li><code>git show</code> 用来查看某次提交的具体情况（包括文件的修改情况），默认查看最新一次的提交，也可以指定一个tag或hash值来查看其它的提交。当然它也可以像log一样格式化输出。</li>
</ul>
</li>
<li><p>merge &amp; rebase &amp; cherry-pick &amp; HEAD</p>
<ul>
<li>这两个命令一定要区分清楚，容易搞混。到底是使用哪个是一个习惯的问题，视自己情况而定。</li>
<li>merge 合并产生一个特殊的提交记录，它包含两个唯一父提交。</li>
<li><code>git merge buxfig</code> 就是把bugfix的内容包含到当前的分支，相当当前分支作为默认参数放在后面，即<code>git merge bugfix master</code>，–no-ff -m <message> 可以禁止fast forward，也就是会新建一个提交。</message></li>
<li><code>git rebase C1 C2</code>是在分支之间合并工作的第二种方法。</li>
<li>rebase 就是取出一条分支(前面的分支C1)的一系列新的的提交记录，”复制”它们，然后把它在另一条分支(后面的分支C2)后面新建一个提交放下来（C1-&gt;C2），这样新的分支就不会有两个父节点，默认将当前分支名作为C2参数传递。</li>
<li><code>git cherry-pick &lt;Commit1&gt; &lt;Commit2&gt; &lt;...&gt;</code> 将一些提交复制到你当前的位置 HEAD 下面。按照顺序选择性的合并一条分支。就是说那个分支中的一些东西是有必要合并的而另一些是没有必要的（注意当你选取的那个提交与当前提交的内容没有区别时会报错，因为你将创建一个没有任何修改的提交）。</li>
<li>举一个场景，我们要排掉某个bug 然后新建的一条bug分支，然后提交了5次，前面五次都没能解决bug，只有最后一次的提交是正确解决了bug的，这样我们就需要只是选取bug分支的最后一个提交就ok了，我们就可以切换到 master 然后 rebase -i bug,<code>git rebase -i branchname/hashvalue</code> 以交互式的方式让你自己选择要复制的提交(重排那些提交),同样的可以使用cherry-pick来选取需要的分支。</li>
<li>HEAD 是当前提交记录的符号名称， HEAD 总是指向最近一次提交记录，大多数修改工作树的 git 命令都开始于改变，HEAD 指向一般HEAD都是指向分支名，所以HEAD总是跟在分支后面。 <strong> 分离 HEAD </strong> 就是让其指向一个提交记录而不是分支名。</li>
<li>相对引用 使用 ^ (可以叠加(HEAD^^) = (HEAD~2(后退多步)))来将HEAD移动到指定提交的父提交。相对引用最多的就是移动分支。你可以使用 -f 选项直接让分支指向另一个提交（详细见git branch -f）。</li>
<li>和 ~ 修改符一样，^ 修改符之后也可以跟一个（可选的）数字。这不是用来指定向上返回几代（~ 的作用），^ 后的数字指定跟随合并提交记录的哪一个父提交。当一个合并提交有多个父提交吧，所有选择哪条路径不是那么清晰。git 默认选择跟随合并提交的”第一个”父提交，使用 ^ 后跟一个数字来改变这一默认行为。</li>
</ul>
</li>
<li><p>reset &amp; revert &amp; tag &amp; describe</p>
<ul>
<li>reset 和 revert 又是两个需要区别的概念。</li>
<li>git reset 往回移动分支，只是撤销了提交而已,但是最近一次提交的修改仍然存在（干净的暂存区被污染了），对别人的远端分支是无效的。</li>
<li>git revert 新建一个提交用来撤销最近一次提交的,最近一次提交的修改已经不存在（干净的工作区依旧干净）。</li>
<li><code>git reset [--hard|soft|mixed] [&lt;commit&gt;|HEAD]</code>：将当前的分支重设（reset）到指定的<commit>或者HEAD（默认，如果不显示指定commit，默认是HEAD，即最新的一次提交），并且根据[mode]有可能更新暂存区和工作区。hard的意思是所有内容都丢弃，并且移动HEAD，soft的意思是仅仅移动HEAD指针（文件修改被移出快照，未被commit），mixed是默认的模式，它的意思是文件修改未被add，已经移出了暂存区。</commit></li>
<li><code>git revert [&lt;commit&gt;|HEAD]</code>git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容。也即是相当于cherry-pick 一个之前的版本。</li>
<li><code>git tag version [commit]</code>可以永远地指向某个特定的可以永远地指向某个特定的 commit，就像是表示一个”里程碑”一样 有新的 commit 时，它们也不会移动，你不可以checkout到 tag 上面 commit，tag 的存在就像是一个在 commit tree 上的表示特定讯息的一个锚。<code>git tag -d [tagname]</code>用来删除一个tag。</li>
<li><code>git describe [ref]</code>用来显示离你最近的锚点（也就是 tag）,[ref] 是任何一个可以被 git 解读成 commit 的位置，如果你没有指定的话，git 会以你目前所在的位置为准（HEAD）。指令的输出就像这样：<code>&lt;tag&gt;_&lt;numCommits&gt;_g&lt;hash&gt;</code> <tag>表示的是离 <ref> 最近的 tag， numCommits 是表示这个 tag 离 <ref> 有多少个 commit， <hash> 表示的是你所给定的 <ref> 所表示的 commit 的hash值。</ref></hash></ref></ref></tag></li>
</ul>
</li>
<li><p>remote</p>
<ul>
<li>使用git肯定要用到远程分支，远程分支有一个全名规范， 它们以这样的格式显示:<remote_name>/<branch_name>。大多数的开发者会将它们的远端命名为 origin。</branch_name></remote_name></li>
<li><code>git remote -v</code> 可以列出远程追踪的地址，包括push和fetch。当你克隆时, git 会创建跟踪分支(就像 origin/master), 对于每个远端分支, 创建一个跟踪远端分支的本地分支 (master), 所以你经常会看到这个的命令输出:<code>local branch &quot;master&quot; set to track remote branch &quot;origin/master&quot;</code></li>
<li><code>git remote add &lt;remotename&gt; &lt;url&gt;</code> 添加远程仓库（适用于有多个远程仓库的情况）</li>
<li><code>git remote rename &lt;old_name&gt; &lt;new_name&gt;</code>用于重命名远程仓库</li>
<li><code>git remote rm &lt;remotename&gt;</code> 用于删除远程仓库。</li>
</ul>
</li>
<li><p>fetch + merge = pull</p>
<ul>
<li>git fetch 从远端仓库获取数据。git fetch 完成了两步:下载本地仓库未包含的提交对象，更新我们的远端分支点(如, origin/master)，git fetch不能改变你的本地状态. 你不会更新你的 master 或者 任何与文件系统相关的东西。所以, 你可以将git fetch 的执行 视为下载</li>
<li>一般的流程是我们用 git fetch 更新了远端在本地的副本, 然后git rebase/merge合并我们的工作以映射远端的新变化, 最后再 git push</li>
<li>git pull, 就是 fetch 和 merge 的简写. 同样的 git pull –rebase 就是 fetch 和 rebase 的简写！</li>
<li>其实有很多方法的，只要我在本地有新的提交, 你可以像合并其它分支那样合并远端分支. 具体说就是你可以执行以下命令:<code>git cherry-pick origin/master</code>,<code>git rebase origin/master</code>，<code>git merge origin/master</code>。</li>
<li><code>git fetch &lt;remote-&gt;repo&gt; &lt;remote-&gt;branch&gt;</code> 用于获取远端的更新，<code>git fetch origin &lt;remote-&gt;source&gt;:&lt;local-&gt;destination&gt;</code>没有local-&gt;source的话会新建本地的destination分支。</li>
<li><code>git push &lt;remote-&gt;repo&gt; &lt;remote-&gt;place&gt;</code> 推送更新到远端</li>
<li><code>git push origin &lt;local-&gt;source&gt;:&lt;remote-&gt;destination&gt;</code>（没有local-&gt;source的话会删除远端的destination分支）</li>
<li><code>git pull origin foo</code> 相当于：<code>git fetch origin foo; git merge origin/foo</code>; <code>git pull origin bar~1:bugFix</code> 相当于：<code>git fetch origin bar~1:bugFix; git merge bugFix</code>git pull 实际上就是 fetch + merge 的缩写, git pull 在乎的是提交在哪里结束(也就是 git fetch 所确定的 destination)</li>
</ul>
</li>
<li><p>push</p>
</li>
<li><p>diff &amp; blame &amp; grep &amp; stash</p>
</li>
<li><p>git flow</p>
</li>
<li><p>git extra</p>
</li>
</ol>
<h3 id="u53C2_u8003_u6587_u7AE0"><a href="#u53C2_u8003_u6587_u7AE0" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" title="进入" target="_blank" rel="external">常用 Git 命令清单</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" title="进入" target="_blank" rel="external">Git分支管理策略</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" title="进入" target="_blank" rel="external">Git 协作流程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/09/git-bitmap.html" title="进入" target="_blank" rel="external">Github 的清点对象算法</a>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u4ECE13_u5E74_u63A5_u89E6git_u5230_u73B0_u5728_u5DF2_u7ECF_u4E24_u5E74_u534A_u4E86_uFF0C_u4ECD_u7136_u4E0D_u80FD_u5F88_u719F_u7EC3_u]]>
    </summary>
    
      <category term="git" scheme="http://kangqingfei.cn/tags/git/"/>
    
      <category term="note" scheme="http://kangqingfei.cn/tags/note/"/>
    
      <category term="tips" scheme="http://kangqingfei.cn/categories/tips/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[use markdown]]></title>
    <link href="http://kangqingfei.cn/2015/12/30/use-markdown/"/>
    <id>http://kangqingfei.cn/2015/12/30/use-markdown/</id>
    <published>2015-12-30T10:41:53.000Z</published>
    <updated>2015-12-31T06:32:54.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5C06_u535A_u5BA2_u4ECEjekyll_u8FC1_u79FB_u5230hexo_u90FD_u8FD8_u7B97_u987A_u5229_uFF0C_u552F_u4E00_u8BA9_u4EBA_u6709_u70B9_u607C_u706B_u7684_u5C31_u662Fmarkdown_u7684_u8BED_u6CD5_u4E0D_u4E00_u81F4_u4E86_uFF08hexo_u8C8C_u4F3C_u6CA1_u90A3_u4E48_u4EFB_u6027_uFF0C_u4E3B_u8981_u662F_u50CF_u6807_u9898_u7684_23_23__u540E_u9762_u5FC5_u987B_u8981_u7A7A_u683C_uFF0C_u4E5F_u4E0D_u652F_u6301__3D_3D_uFF09_uFF0C_u6240_u4EE5_u719F_u6089_u4E00_u4E0Bhexo_u4E0B_u7684markdown_u8BED_u6CD5_uFF0C_u987A_u4FBF_u590D_u4E60_u4E00_u4E0B_u3002_u4E3B_u8981_u662F_u53C2_u8003http_3A//www-appinn-com/markdown/_uFF0C_u628A_u4E00_u4E9B_u5E38_u7528_u7684_u8BB0_u5F55_u4E86_u4E00_u4E0B_u3002"><a href="#u5C06_u535A_u5BA2_u4ECEjekyll_u8FC1_u79FB_u5230hexo_u90FD_u8FD8_u7B97_u987A_u5229_uFF0C_u552F_u4E00_u8BA9_u4EBA_u6709_u70B9_u607C_u706B_u7684_u5C31_u662Fmarkdown_u7684_u8BED_u6CD5_u4E0D_u4E00_u81F4_u4E86_uFF08hexo_u8C8C_u4F3C_u6CA1_u90A3_u4E48_u4EFB_u6027_uFF0C_u4E3B_u8981_u662F_u50CF_u6807_u9898_u7684_23_23__u540E_u9762_u5FC5_u987B_u8981_u7A7A_u683C_uFF0C_u4E5F_u4E0D_u652F_u6301__3D_3D_uFF09_uFF0C_u6240_u4EE5_u719F_u6089_u4E00_u4E0Bhexo_u4E0B_u7684markdown_u8BED_u6CD5_uFF0C_u987A_u4FBF_u590D_u4E60_u4E00_u4E0B_u3002_u4E3B_u8981_u662F_u53C2_u8003http_3A//www-appinn-com/markdown/_uFF0C_u628A_u4E00_u4E9B_u5E38_u7528_u7684_u8BB0_u5F55_u4E86_u4E00_u4E0B_u3002" class="headerlink" title="将博客从jekyll迁移到hexo都还算顺利，唯一让人有点恼火的就是markdown的语法不一致了（hexo貌似没那么任性，主要是像标题的## 后面必须要空格，也不支持 ==），所以熟悉一下hexo下的markdown语法，顺便复习一下。主要是参考http://www.appinn.com/markdown/，把一些常用的记录了一下。"></a>将博客从<code>jekyll</code>迁移到<code>hexo</code>都还算顺利，唯一让人有点恼火的就是<code>markdown</code>的语法不一致了（hexo貌似没那么任性，主要是像标题的<code>##</code> 后面必须要空格，也不支持 <code>==</code>），所以熟悉一下<code>hexo</code>下的<code>markdown</code>语法，顺便复习一下。主要是参考<a href="http://www.appinn.com/markdown/" title="参考网址" target="_blank" rel="external">http://www.appinn.com/markdown/</a>，把一些常用的记录了一下。</h3><ol>
<li><p>标题 使用 1-6 个 <code>#</code>，对应一级标题到六级标题。</p>
<blockquote>
<h1 id="u4E00_u7EA7_u6807_u9898"><a href="#u4E00_u7EA7_u6807_u9898" class="headerlink" title="一级标题"></a>一级标题</h1><h6 id="u516D_u7EA7_u6807_u9898"><a href="#u516D_u7EA7_u6807_u9898" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
</li>
<li><p>列表 使用 <code>*</code>或<code>+</code>或<code>-</code>对应无序列表，使用<code>n.</code>来表示有序列表，列表标记上使用的数字并不会影响输出的 HTML 结果。列表项目包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符。列表项目内放进引用，那 <code>&gt;</code> 就需要缩进。</p>
<blockquote>
<ul>
<li>无序列表</li>
<li>无序列表</li>
</ul>
<ol>
<li>有序列表</li>
<li>列表段落<br>列表段落</li>
<li><blockquote>
<p>列表中的引用</p>
</blockquote>
</li>
<li>code block in list</li>
</ol>
</blockquote>
</li>
<li><p>区块引用，使用 <code>&gt;</code> 来进行区块引用由于区块应用可以与本身和其他元素嵌套，只要根据层次加上不同数量的 <code>&gt;</code> 所以感觉很好用，例如这里就是用的区块嵌套以在演示和源文件之间保持更好的排版。</p>
</li>
<li>代码区块，缩进 4 个空格或是 1 个制表符。</li>
<li><p>分割线，使用三个或以上的<code>*</code>、<code>-</code>、<code>_</code>来表示一条分割线。</p>
<blockquote>
<hr>
<hr>
<hr>
</blockquote>
</li>
<li><p>使用<code>[text](url &quot;title&quot;)</code>来表示一个链接。</p>
<blockquote>
<p><a href="http://kangqingfei.cn/" title="kblog">an example link to kblog</a></p>
</blockquote>
</li>
<li><p>强调，使用<code>**text**</code>或<code>_text_</code>来表示强调，一个斜体两个加粗。</p>
<blockquote>
<p><strong>这是一个强调加粗</strong><br><em>这是强调斜体</em></p>
</blockquote>
</li>
<li><p>代码，使用反引号来表示一小段代码。</p>
</li>
<li><code>![Alt text](/path/to/img.jpg)</code>来插入一张图片。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5C06_u535A_u5BA2_u4ECEjekyll_u8FC1_u79FB_u5230hexo_u90FD_u8FD8_u7B97_u987A_u5229_uFF0C_u552F_u4E00_u8BA9_u4EBA_u6709_u70B9_u607C_u7]]>
    </summary>
    
      <category term="hexo" scheme="http://kangqingfei.cn/tags/hexo/"/>
    
      <category term="markdown" scheme="http://kangqingfei.cn/tags/markdown/"/>
    
      <category term="tips" scheme="http://kangqingfei.cn/categories/tips/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[from jekyll to hexo]]></title>
    <link href="http://kangqingfei.cn/2015/12/30/from-jekyll-to-hexo/"/>
    <id>http://kangqingfei.cn/2015/12/30/from-jekyll-to-hexo/</id>
    <published>2015-12-30T08:17:53.000Z</published>
    <updated>2015-12-31T06:31:07.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u4E0A_u9762_u5199_u4E86_u4E00_u7BC7_u6587_u7AE0_uFF0C_u611F_u89C9_u771F_u662F_u4E11_u7206_u4E86_uFF0C_u5185_u5BB9_u81ED_uFF0C_u754C_u9762_u4E11_uFF0C_u8FD8_u4E0D_u662F_u5F88_u9002_u914D_u624B_u673A_uFF0C_u6240_u4EE5_u5C31_u5F88_u607C_u706B_uFF0C_u8FD9_u65F6_u53D1_u73B0_u4E00_u4E2A_u5F88_u4E0D_u9519_u7684_u57FA_u4E8E_hexo_u7684_u4E3B_u9898yilia_uFF0C_u611F_u89C9_u53EF_u4EE5_u6709_u3002_u5176_u5B9E_u4E4B_u524D_u5C31_u542C_u8FC7_hexo_u7684_u5927_u540D_uFF0C_u53EA_u662F_u6CA1_u60F3_u5230_u6BD4_u60F3_u8C61_u4E2D_u7684_u8FD8_u597D_u73A9_uFF0C_u5BF9_u6BD4_u4E4B_u4E0B_uFF0Cjekyll_u76F8_u5F53_u4E8E_u628A_u4F60_u7684markdown_u653E_u5230_u4E86github_u7136_u540E_u8BA9_u5B83_u7ED9_u4F60_u7F16_u8BD1_uFF0C_u800Chexo_u5219_u662F_u628A_u4F60_u7684markdown_u7F16_u8BD1_u6210html_u540E_u53D1_u5E03_u5230github_uFF08_u6240_u4EE5_u4E0D_u5B58_u5728jekyll_u7684_u90A3_u79CD_u65F6_u5EF6_uFF09_uFF0C_u66F4_u91CD_u8981_u7684_u662F_u4EBA_u5BB6_u57FA_u4E8Enode_uFF0C_u53EF_u6269_u5C55_u5F3A_uFF0C_u4E0D_u7528_u90A3_u4E48_u70E6_u4E5F_u4E0D_u4F1A_u8001_u51FA_u95EE_u9898_uFF0C_u914D_u7F6E_u4E5F_u662F_u7B80_u5355_uFF0C_u91CD_u8981_u7684_u662F_u4EBA_u5BB6_u989C_u503C_u9AD8_u554A_uFF0C_u7136_u540E_u8FD8_u6709_u4EE5_u4E0B_u51E0_u70B9_u8BA9_u6211_u5F88_u5FC3_u52A8_uFF1A"><a href="#u4E0A_u9762_u5199_u4E86_u4E00_u7BC7_u6587_u7AE0_uFF0C_u611F_u89C9_u771F_u662F_u4E11_u7206_u4E86_uFF0C_u5185_u5BB9_u81ED_uFF0C_u754C_u9762_u4E11_uFF0C_u8FD8_u4E0D_u662F_u5F88_u9002_u914D_u624B_u673A_uFF0C_u6240_u4EE5_u5C31_u5F88_u607C_u706B_uFF0C_u8FD9_u65F6_u53D1_u73B0_u4E00_u4E2A_u5F88_u4E0D_u9519_u7684_u57FA_u4E8E_hexo_u7684_u4E3B_u9898yilia_uFF0C_u611F_u89C9_u53EF_u4EE5_u6709_u3002_u5176_u5B9E_u4E4B_u524D_u5C31_u542C_u8FC7_hexo_u7684_u5927_u540D_uFF0C_u53EA_u662F_u6CA1_u60F3_u5230_u6BD4_u60F3_u8C61_u4E2D_u7684_u8FD8_u597D_u73A9_uFF0C_u5BF9_u6BD4_u4E4B_u4E0B_uFF0Cjekyll_u76F8_u5F53_u4E8E_u628A_u4F60_u7684markdown_u653E_u5230_u4E86github_u7136_u540E_u8BA9_u5B83_u7ED9_u4F60_u7F16_u8BD1_uFF0C_u800Chexo_u5219_u662F_u628A_u4F60_u7684markdown_u7F16_u8BD1_u6210html_u540E_u53D1_u5E03_u5230github_uFF08_u6240_u4EE5_u4E0D_u5B58_u5728jekyll_u7684_u90A3_u79CD_u65F6_u5EF6_uFF09_uFF0C_u66F4_u91CD_u8981_u7684_u662F_u4EBA_u5BB6_u57FA_u4E8Enode_uFF0C_u53EF_u6269_u5C55_u5F3A_uFF0C_u4E0D_u7528_u90A3_u4E48_u70E6_u4E5F_u4E0D_u4F1A_u8001_u51FA_u95EE_u9898_uFF0C_u914D_u7F6E_u4E5F_u662F_u7B80_u5355_uFF0C_u91CD_u8981_u7684_u662F_u4EBA_u5BB6_u989C_u503C_u9AD8_u554A_uFF0C_u7136_u540E_u8FD8_u6709_u4EE5_u4E0B_u51E0_u70B9_u8BA9_u6211_u5F88_u5FC3_u52A8_uFF1A" class="headerlink" title="上面写了一篇文章，感觉真是丑爆了，内容臭，界面丑，还不是很适配手机，所以就很恼火，这时发现一个很不错的基于 hexo的主题yilia，感觉可以有。其实之前就听过 hexo的大名，只是没想到比想象中的还好玩，对比之下，jekyll相当于把你的markdown放到了github然后让它给你编译，而hexo则是把你的markdown编译成html后发布到github（所以不存在jekyll的那种时延），更重要的是人家基于node，可扩展强，不用那么烦也不会老出问题，配置也是简单，重要的是人家颜值高啊，然后还有以下几点让我很心动："></a>上面写了一篇文章，感觉真是丑爆了，内容臭，界面丑，还不是很适配手机，所以就很恼火，这时发现一个很不错的基于 <a href="https://hexo.io/" target="_blank" rel="external">hexo</a>的主题<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a>，感觉可以有。其实之前就听过 <code>hexo</code>的大名，只是没想到比想象中的还好玩，对比之下，jekyll相当于把你的markdown放到了github然后让它给你编译，而hexo则是把你的markdown编译成html后发布到github（所以不存在jekyll的那种时延），更重要的是人家基于node，可扩展强，不用那么烦也不会老出问题，配置也是简单，重要的是人家颜值高啊，然后还有以下几点让我很心动：</h4><ul>
<li>自动生成rss，我都不记得当时是怎么搞的jekyll才让它弄成了rss，反正是很烦。</li>
<li>看到有七牛的图片外链插件，你懂得github的速度，有了外链妈妈再也不怕我放图片了。</li>
<li>可以引用代码文件，这个之前不知道在jekyll里是不是有这个功能。</li>
<li>无痛迁移，可以从jekyll无痛迁移到hexo，虽然以前没有写多少东西，但是这就是人家的态度很端正啊。<h3 id="u6240_u4EE5_u679C_u65AD_u6362_u4E86_u3002_u90A3_u5C31_u8BA9_u6211_u4EEC_u4E00_u6B65_u6B65_u5730_u6765_u642D_u5EFA_u6211_u4EEC_u7684hexo_blog_u5427_u3002"><a href="#u6240_u4EE5_u679C_u65AD_u6362_u4E86_u3002_u90A3_u5C31_u8BA9_u6211_u4EEC_u4E00_u6B65_u6B65_u5730_u6765_u642D_u5EFA_u6211_u4EEC_u7684hexo_blog_u5427_u3002" class="headerlink" title="所以果断换了。那就让我们一步步地来搭建我们的hexo blog吧。"></a>所以果断换了。那就让我们一步步地来搭建我们的hexo blog吧。</h3></li>
</ul>
<ol>
<li><p>准备工作，首先你要装好node，怎么装就自己去找了，这里提醒一点，就是以前（考研之前）我玩node的时候装插件是很慢的，但是这次我不知道咋地速度杠杠的，我怀疑是npm的配置问题，因为以前好像是配置过npm的源，我在win下输，<code>npm</code> 会出现</p>
<blockquote>
<blockquote>
<p>Specify configs in the ini-formatted file:<br>  C:\Users\kqf\.npmrc</p>
</blockquote>
<p>然后我看了一下那个文件，是这样的</p>
<blockquote>
<p>prefix=c:\ProgramFiles\nodejs\gnode_modules<br>registry=<a href="http://r.cnpmjs.org" target="_blank" rel="external">http://r.cnpmjs.org</a></p>
</blockquote>
<p>并且我还差异的发现有个<code>C:\Users\kqf\.cnpmrc</code>，才想起来好像装过cnpm（刚推广那会儿装的），反正是好久之前弄得了，我记得当时速度还是很慢，不知道为啥现在这么快了，毕竟过去这么久了，咋们的基础设施肯定要跟上来啊，不然哪有那么多人学node。反正现在速度是没有问题的了，大家可以去官网看看<a href="http://cnpmjs.org/" target="_blank" rel="external">http://cnpmjs.org/</a>或者淘宝的镜像<a href="https://npm.taobao.org/" target="_blank" rel="external">https://npm.taobao.org/</a>。</p>
</blockquote>
</li>
<li><p>安装一个博客，搞好上面的后就可以<code>npm install hexo-cli -g</code>安装一个hexo，然后建立一个博客，<code>hexo init blog</code>，安装模块<code>cd blog</code> <code>npm install</code> 然后选取一个主题，我的是之前提过的<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a>,所以<code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code>,修改hexo根目录下的 <code>_config.yml</code> -&gt; <code>theme: yilia</code>，然后再<code>hexo server(hexo s)</code>你就能看到一个博客了。</p>
</li>
<li><p>安装插件，我们先要对博客进行配置，再对主题进行配置。考虑到其中还要对插件进行配置所以索性先把用到的几个插件装上,<code>npm install hexo-generator-feed hexo-generator-sitemap hexo-pdf hexo-qiniu-sync --save</code></p>
<blockquote>
<p><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>     -&gt;生成rss<br><a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="external">hexo-generator-sitemap</a>  -&gt;生成sitemap<br><a href="https://github.com/superalsrk/hexo-pdf/" target="_blank" rel="external">hexo-pdf</a>                 -&gt;嵌入pdf<br><a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="external">hexo-qiniu-sync</a>          -&gt;插入图片外链，并且同步你的文件到七牛云</p>
</blockquote>
</li>
<li><p>然后开始配置，具体细节我就不说了，主要是配一些基本信息还有插件信息还有<code>deploy（使用ssh而不是http）</code>的信息。我把我的配置文件拿上来给参考一下<a href="http://kangqingfei.qiniudn.com/blog%2Fcodes%2Fconfigs%2Fhexo_config.yml" target="_blank" rel="external">hexo_config.yml</a> ，下面主要说几个坑</p>
<blockquote>
<p><code>language: zh-Hans</code>  这个语言一开始看官网的doc直接就填了zh 后面发现貌似中文变成繁体的了（估计开发者是台湾人的缘故），之后看到<code>themes\yilia\languages\zh-Hans.yml</code>才知道该填这个。<br><code>code_dir: assest/codes</code>  这里要改成你存放代码的路径要不然后面会不能从文件引入代码块。<br><code>new_post_name: :year-:month-:day-:title.md</code> 这里改成这个一是为了搞清楚文章发表的时间，而是为了从jekyll迁移的时候不出错，原话如下</p>
<blockquote>
<p>Move all files in the Jekyll _posts folder to the source/_posts folder.<br>Modify the new_post_name setting in _config.yml:<br>new_post_name: :year-:month-:day-:title.md</p>
</blockquote>
<p><code>local_dir: source/assest</code> 这是七牛那个插件的配置，记得前面不能有<code>/</code>不然会出错，在这卡了好久。<br> 其他倒没啥了，就是<strong>rss和sitemap一直生成不了</strong>后来找到一个解决方案<code>hexo d -g</code>就有了。</p>
</blockquote>
</li>
<li>配置主题，同样的我把我的配置文件拿上来给参考一下<a href="http://kangqingfei.qiniudn.com/blog%2Fcodes%2Fconfigs%2Fyilia_config.yml" target="_blank" rel="external">yilia_config.yml</a> ，要配置的东西有，自己的社交信息，<code>google_analytics</code>的ID,多少评论的ID。</li>
<li>写文章了，在之前先讲下他的原理，我们可以通过<code>hexo new &quot;Hello Hexo&quot;</code>生成一个新的文章。这个文章会默认使用<code>scaffolds</code>下的模板（layout），然后把生成的markdown放到<code>source/_posts</code>下。同理你可以猜到，<code>hexo new(hexo n) page &quot;xxx&quot;</code>会把生成的markdown放到<code>source</code>下面，<code>hexo new draft &quot;xxx&quot;</code>会放到<code>source/_draft</code>下面（鸡肋的草稿没啥用，其实post不deploy就是draft了啊）。并且我们可以自己定义layout并放到<code>scaffolds</code>下面，通过<code>hexo new layoutname &quot;xxxxx&quot;</code>生成一篇基于自己定义的layout的文章，他会将我们自己模板生成的markdown同样放到<code>source/_posts</code>下。这样就允许我们自己把一些常用的标签放到里面了，我自己定义了一个article的layout，里面有我常用的一些东西，发给大家参考一下<a href="http://kangqingfei.qiniudn.com/blog%2Fcodes%2Fconfigs%2Fhexo_article_layout.mmd" target="_blank" rel="external">hexo_article_layout.mmd</a>（由于<strong>这里不能放md文件否则生成会报错</strong>，所以只好改成mmd）。这里主要搞清楚几个用法<blockquote>
<ol>
<li>设置categories，和tags的方法。</li>
<li>include_code 的路径是相对配置中的code_dir而言的，不要搞错了。</li>
<li>七牛云的图片的路径也是相对于你填的那个前缀而言的。</li>
<li>七牛云的图片处理问题：这个问题主要去<a href="http://developer.qiniu.com/docs/v6/api/reference/fop/image/" target="_blank" rel="external">七牛</a>看看,就是大小和水印的问题</li>
</ol>
</blockquote>
</li>
<li>发布，我们的markdown可以通过<code>hexo generate(hexo g)</code>来生成静态页面即发布时的文件（至于public文件夹下）,通过<code>hexo clean</code>来清除，通过<code>hexo deploy(hexo d )</code>发布到指定的仓库。</li>
</ol>
<h4 id="u63A5_u4E0B_u6765_u770B_u770B_u6548_u679C_u4E86_u3002"><a href="#u63A5_u4E0B_u6765_u770B_u770B_u6548_u679C_u4E86_u3002" class="headerlink" title="接下来看看效果了。"></a>接下来看看效果了。</h4><a href="http://kangqingfei.cn" title="go to kblog">kblog</a>
<p><a href="mailto:kangqingfei@gmail.com" title="Email" target="_blank" rel="external">Write to me</a></p>
<figure class="highlight c"><figcaption><span>test.c</span><a href="/assest/codes/test.c">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test load code file</span><br></pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>yilia_config.ym</span><a href="http://kangqingfei.qiniudn.com/blog%2Fcodes%2Fconfigs%2Fyilia_config.yml" target="_blank" rel="external">源文件</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code snippet</span><br></pre></td></tr></table></figure>
<img src="/assest/images/test.png" class="class names" width="32" height="32" title="图 图片">
<p><img src="/assest/images/test.png" alt="图片"></p>
<p>顺便送本电子书<br><div class="row">
  <iframe src="http://nagland.github.io/viewer/web/viewer.html?val=http://kangqingfei.qiniudn.com/blog%2Fpdf%2Ftest.pdf" style="width:100%; height:550px"> 
  </iframe>
</div></p>
<img title="test" alt="来自七牛云的图片" class="class1" src="http://kangqingfei.qiniudn.com/blog/images/test.png">
<img attr1="value1" attr2="value2" attr3="value31" [extend="?imageView2/2/w/600" src="http://kangqingfei.qiniudn.com/blog/images/test.png">
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u4E0A_u9762_u5199_u4E86_u4E00_u7BC7_u6587_u7AE0_uFF0C_u611F_u89C9_u771F_u662F_u4E11_u7206_u4E86_uFF0C_u5185_u5BB9_u81ED_uFF0C_u754C_]]>
    </summary>
    
      <category term="hexo" scheme="http://kangqingfei.cn/tags/hexo/"/>
    
      <category term="install" scheme="http://kangqingfei.cn/tags/install/"/>
    
      <category term="tips" scheme="http://kangqingfei.cn/categories/tips/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Install ArchLinux to USB media or Virtual Machine]]></title>
    <link href="http://kangqingfei.cn/2015/12/29/install-archlinux-to-usb-media-or-virtual-machine/"/>
    <id>http://kangqingfei.cn/2015/12/29/install-archlinux-to-usb-media-or-virtual-machine/</id>
    <published>2015-12-29T00:00:00.000Z</published>
    <updated>2016-01-05T13:14:58.000Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="u662F_u7684_uFF0C_u8003_u5B8C_u4E86_uFF0C_u8003_u5B8C_u4E86_uFF0C_u8003_u5B8C_u4E86_uFF01"><a href="#u662F_u7684_uFF0C_u8003_u5B8C_u4E86_uFF0C_u8003_u5B8C_u4E86_uFF0C_u8003_u5B8C_u4E86_uFF01" class="headerlink" title="是的，考完了，考完了，考完了！"></a>是的，考完了，考完了，考完了！</h1><hr>
<hr>
<h3 id="u90A3_u5C31_u6765_u88C5_u4E2A_u7CFB_u7EDF_u5427_u3002"><a href="#u90A3_u5C31_u6765_u88C5_u4E2A_u7CFB_u7EDF_u5427_u3002" class="headerlink" title="那就来装个系统吧。"></a>那就来装个系统吧。</h3><ol>
<li>打开VMware，新建一个虚拟机，使用<code>archlinux-2015.12.01-dual.iso</code>(连上教育网去北交的镜像站下载)，作为启动安装盘，新建一个10G的硬盘</li>
<li><code>fdisk -l</code>  <code>fdisk /dev/sda</code> 新建一个100M分区，剩下再建一个分区。</li>
<li>格式化  <code>mkfs.ext4 /dev/sda1</code>   <code>mkfs.ext4 /dev/sda2</code></li>
<li>挂载  <code>mount /dev/sda1 /boot</code>   <code>mount /dev/sda2 /mnt</code></li>
<li>编辑源 <code>vi /etc/pacman.d/mirrorlist</code>   <code>467 dd</code> 删除前面的把最后一行改成北京交通大学的源 <code>Server = http://mirror.bjtu.edu.cn/archlinux/$repo/os/$arch</code></li>
<li>安装基本的系统 <code>gacstrap -i /mnt base base-devel vim</code></li>
<li>生成挂载信息 <code>genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab</code></li>
<li>chroot 到新系统 <code>arch-chroot /mnt</code></li>
<li>写入主机名 <code>echo xxx &gt; /etc/hostname</code></li>
<li>生成文字编码 <code>vim /etc/locale.gen</code> 将<code>zh_CN</code>打头的 以及 <code>en_US.UTF8 UTF8</code> 取消注释 运行<code>locale-gen</code></li>
<li>如果要安装到<strong><em>usb</em></strong>移动介质 就将<code>/etc/mkinitcpio.conf</code>里面的<code>HOOKS</code>加上 <code>block</code> 然后 <code>mkinitcpio -p linux</code></li>
<li>然后设置密码 <code>passwd</code></li>
<li><p>安装 <code>syslinux</code> 生成引导 <code>syslinux-install_update -iam</code><br><br>如果是usb介质 就还要将 <code>/boot/syslinux/syslinux.cfg</code> 里面的<code>arch archfallback</code> 的<code>APPEND</code> 中的<code>sdx</code><br><br>改成 <code>root=UUID=xxxx rw</code> 因为这样才能找到U盘 xxxx是U盘的<strong><em>/mnt所在分区的UUID</em></strong></p>
</li>
<li><p>安装一些必要的工具 <code>net-tools git zsh i3 xorg-server xorg-server-utils xorg-xinit xterm</code></p>
</li>
</ol>
<h3 id="u5728_u865A_u62DF_u673A_u91CC_u9762_u88C5_u6CA1_u6539syslinux-cfg_u53D1_u73B0_u8FD8_u662F_u9519_u4E86__u627E_u4E0D_u5230/dev/sda3__u53C8_u662F_u5728_u865A_u62DF_u673A_u4E0A_u5B89_u88C5_u7684__u600E_u4E48_u529E"><a href="#u5728_u865A_u62DF_u673A_u91CC_u9762_u88C5_u6CA1_u6539syslinux-cfg_u53D1_u73B0_u8FD8_u662F_u9519_u4E86__u627E_u4E0D_u5230/dev/sda3__u53C8_u662F_u5728_u865A_u62DF_u673A_u4E0A_u5B89_u88C5_u7684__u600E_u4E48_u529E" class="headerlink" title="在虚拟机里面装没改syslinux.cfg发现还是错了 找不到/dev/sda3 又是在虚拟机上安装的 怎么办"></a>在虚拟机里面装没改<code>syslinux.cfg</code>发现还是错了 找不到<code>/dev/sda3</code> 又是在虚拟机上安装的 怎么办</h3><ol>
<li>开机按<code>F2</code>然后将光盘的启动优先级放到最高 然后再次进到live里面</li>
<li>按照之前的方法挂载 然后 <code>arch-chroot /mnt</code> 然后就把<code>/boot/syslinux/syslinux.cfg</code>里面的<code>/sda3</code> 改成 <code>/sda2</code> 就ok<h4 id="u628A_u542F_u52A8_u9879_u6539_u56DE_u6765_uFF0C_u542F_u52A8_dhcpd__u83B7_u53D6_ip__uFF0C_u7136_u540E_startx__u7ADF_u7136_u6CA1_u8D77_u6765_u3002_u3002_u3002_u65E0_u5948_pacman_-S_xorg__u7136_u540E_u56DE_u8F66_u5168_u9009_uFF0C_u786E_u5B9A_u5B89_u88C5_u7136_u540E_u8FD8_u6CA1_u8D77_u6765__u6012_u4E86__u76F4_u63A5_vim_-xinitrc__u5199_u5165_exec_i3__u518Dstartx_u5C31_u628A_i3__u8DD1_u8D77_u6765_u4E86_u3002_u8865_u5145_u51E0_u4E2A_u53EF_u80FD_u7528_u5230_u7684_u4E1C_u897F"><a href="#u628A_u542F_u52A8_u9879_u6539_u56DE_u6765_uFF0C_u542F_u52A8_dhcpd__u83B7_u53D6_ip__uFF0C_u7136_u540E_startx__u7ADF_u7136_u6CA1_u8D77_u6765_u3002_u3002_u3002_u65E0_u5948_pacman_-S_xorg__u7136_u540E_u56DE_u8F66_u5168_u9009_uFF0C_u786E_u5B9A_u5B89_u88C5_u7136_u540E_u8FD8_u6CA1_u8D77_u6765__u6012_u4E86__u76F4_u63A5_vim_-xinitrc__u5199_u5165_exec_i3__u518Dstartx_u5C31_u628A_i3__u8DD1_u8D77_u6765_u4E86_u3002_u8865_u5145_u51E0_u4E2A_u53EF_u80FD_u7528_u5230_u7684_u4E1C_u897F" class="headerlink" title="把启动项改回来，启动 dhcpd 获取 ip ，然后 startx 竟然没起来。。。无奈 pacman -S xorg 然后回车全选，确定安装然后还没起来 怒了 直接 vim .xinitrc 写入 exec i3 再startx就把 i3 跑起来了。补充几个可能用到的东西"></a>把启动项改回来，启动 <code>dhcpd</code> 获取 ip ，然后 <code>startx</code> 竟然没起来。。。无奈 <code>pacman -S xorg</code> 然后回车全选，确定安装然后<strong><em>还没起来</em></strong> <strong>怒了</strong> 直接 <code>vim .xinitrc</code> 写入 <code>exec i3</code> 再<code>startx</code>就把 i3 跑起来了。补充几个可能用到的东西</h4><blockquote>
<p><code>wifi-menu</code>(包含在<code>dialog</code>中) -&gt; 用来配合<code>netctl</code>连WiFi<br><code>pacman -S openssh</code> 安装ssh服务,如何配置ssh（d）可以<code>man sshd_config</code>（<code>man ssh_config</code>）<br><code>systemctl enable/start sshd.service</code> (开机)启动ssh服务，<br><code>/etc/ssh/sshd_config</code> ssh配置文件默认不允许root用户登录 prohibit-password -&gt; yes<br><code>systemctl enable dhcpcd.service</code> 开机自动DHCP获取地址</p>
<p>持续更新中……….</p>
</blockquote>
</li>
</ol>
<h3 id="u95EE_u9898_u89E3_u51B3"><a href="#u95EE_u9898_u89E3_u51B3" class="headerlink" title="问题解决"></a>问题解决</h3><ol>
<li>遇到<code>a stop job is running for session c1 of user root 1 min 30 s</code>关机很慢的问题，这是systemd的bug，详细可以参考<a href="https://bbs.archlinux.org/viewtopic.php?id=203112" target="_blank" rel="external">这篇文章</a>按照里面22楼的说法把<code>/etc/systemd/system.conf</code>里面的<code>DefaultTimeoutStopSec=90s</code>改成了1s。因为不想降级了，所以只能这样了</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="u662F_u7684_uFF0C_u8003_u5B8C_u4E86_uFF0C_u8003_u5B8C_u4E86_uFF0C_u8003_u5B8C_u4E86_uFF01"><a href="#u662F_u7684_uFF0C_u8003_u5]]>
    </summary>
    
      <category term="archlinux" scheme="http://kangqingfei.cn/tags/archlinux/"/>
    
      <category term="media" scheme="http://kangqingfei.cn/tags/media/"/>
    
      <category term="virtualmachine" scheme="http://kangqingfei.cn/tags/virtualmachine/"/>
    
      <category term="tips" scheme="http://kangqingfei.cn/categories/tips/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[DigitalOcean VPS转移机房]]></title>
    <link href="http://kangqingfei.cn/2015/08/27/digitalocean-vps/"/>
    <id>http://kangqingfei.cn/2015/08/27/digitalocean-vps/</id>
    <published>2015-08-27T00:00:00.000Z</published>
    <updated>2015-12-31T06:37:40.000Z</updated>
    <content type="html"><![CDATA[<hr>
<p>今天又是折腾自己的VPS，发现以前只是把它关机了还是会收费的，，，真是脑残，应该把droplets删了才会停止收费！所以很无语地发现自己的ss好慢啊，自从某博士的科学上网服务停止后，看视频都没劲了，果断给VPS换地方。在官网的测速网站<a href="http://speedtest-ams1.digitalocean.com/" target="_blank" rel="external">http://speedtest-ams1.digitalocean.com/</a>上测完后发现AMS1的速度快得达到满速，可惜的是那个地方不提供创建droplets了，而AWS2的速度只有1M左右其他都不理想，不过SGP1的速度貌似有6、7M但是听说不稳定管他呢，总比开始的NYC3好吧。所以先关机创建snapshot然后把它发到新加坡机房，貌似有点久半小时左右。然后创建新的droplets选择刚发过去的快照最后拿到root密码改过密码后感觉贼快了，比开始的一卡一卡的好多了，至少ssh不会卡顿，恩还是很好地说。</p>
<h2 id="u95EE_u9898_u6765_u4E86"><a href="#u95EE_u9898_u6765_u4E86" class="headerlink" title="问题来了"></a>问题来了</h2><p>转过来后发现自己网站的头像图片挂了其他的却正常，一想自己的头像图片是存在mongo里面的其他就没有，可能是mongo的问题<br>仔细一查果然 node 起不来了 mongo 也有问题了，其中mongo报错  </p>
<pre><code>Error: couldn&apos;t connect to server 127.0.0.1:27017 (127.0.0.1),
connection attempt failed at src/mongo/shell/mongo.js:146
exception: connect failed
</code></pre><p>Node 报错：</p>
<pre><code>Running &quot;connect:server&quot; (connect) task
Waiting forever...
Fatal error: listen EADDRNOTAVAIL
</code></pre><p>然后各种查一开始以为是两个东西的问题，就把啥锁也清了，也修复了。后面发现远程能进入mongo，本地却不行，觉得特别地奇葩，然后搜到可能是hosts的原因，可以cat /etc/hosts 发现有127.0.0.1解析到localhost啊，，，怎么办呢。我就ping 127.0.0.1 发现 unreachable ，在一搜 发现可能是hosts ,lo ,firewall ,icmp_echo_ignore出了问题。果然 ifconfig 发现没有 lo，，，，，，顿时晕了。。所以，ifconfig lo up 后<strong>整个世界都亮了</strong>。PS：本人的vps会开一段时间，恩，<code>需要ss</code>的可以<strong>微博或邮件联系我</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>今天又是折腾自己的VPS，发现以前只是把它关机了还是会收费的，，，真是脑残，应该把droplets删了才会停止收费！所以很无语地发现自己的ss好慢啊，自从某博士的科学上网服务停止后，看视频都没劲了，果断给VPS换地方。在官网的测速网站<a href="http:/]]>
    </summary>
    
      <category term="grunt" scheme="http://kangqingfei.cn/tags/grunt/"/>
    
      <category term="mongo" scheme="http://kangqingfei.cn/tags/mongo/"/>
    
      <category term="node" scheme="http://kangqingfei.cn/tags/node/"/>
    
      <category term="tips" scheme="http://kangqingfei.cn/categories/tips/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[using jekyll gracefully]]></title>
    <link href="http://kangqingfei.cn/2015/08/26/using-jekyll-gracefully/"/>
    <id>http://kangqingfei.cn/2015/08/26/using-jekyll-gracefully/</id>
    <published>2015-08-26T00:00:00.000Z</published>
    <updated>2015-12-31T06:34:52.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u4E3A_u5565_u53C8_u6298_u817E_u8FD9_u8D27_uFF1F"><a href="#u4E3A_u5565_u53C8_u6298_u817E_u8FD9_u8D27_uFF1F" class="headerlink" title="为啥又折腾这货？"></a>为啥又折腾这货？</h2><ol>
<li>在家，看不进书，有时间没事干，所以。。。。。。</li>
<li>鉴于各种社交平台的太那啥，想拥有自己的一个小港湾（好扯淡）</li>
<li>要<code>认真</code>考研了，说不定哪天就发神经想写点啥煽情的东西了</li>
<li>觉得很多东西还是得记录一下，就像寒假把这货搞得那么透而现在啥都忘了，毕竟好记性不如烂笔头！</li>
<li>嗯，好像可以装那啥对吧。。。。。 未完待续</li>
</ol>
<h2 id="u4ECE_u5934_u5F00_u59CB_u8BF4_u8D77"><a href="#u4ECE_u5934_u5F00_u59CB_u8BF4_u8D77" class="headerlink" title="从头开始说起"></a>从头开始说起</h2><ol>
<li>首先有个github的账号，然后最好有个域名，然后创建一个<code>username.github.io</code>的<code>repositories</code>添加<code>CNAME</code>文件（里面填上自己的域名即可）让github原生的域名重定向到自己的域名。接下来配置自己域名解析到自己博客托管在github上的服务器，在自己的域名支持<code>CNAME</code>的情况下你可以直接将<code>CNAME</code>配置为<code>username.github.io</code>。像我这种穷人的域名并不支持的情况下，就用<code>nslookup</code>查到自己项目的ip，然后解析到这个ip（事实上github会给每个要求的项目分配一个ip而且这货还不变，真是爽），这些就不多说了</li>
<li>拥有一个框架，像我用的 JekyllBootstrap 类似的，要想在本地折腾一下要装上<code>ruby ruby-dev jekyll rdiscount</code>然后win下的话要设置好环境变量等。</li>
<li>这样就可以在本地起一个服务器了，切换到项目的根目录：<blockquote>
<ul>
<li>开启服务器 <code>jekyll serve</code> 或 <code>rake preview</code> 这会默认在4000端口起服务器</li>
<li>添加一篇文章  <code>rake post title=&quot;Hello World&quot;</code>或<code>rake page name=&quot;pages/about.md&quot;（不加.md默认生成.html）</code> post 和 page 区别在于layout的不同</li>
<li>安装themes <code>rake theme:install git=&quot;https://github.com/jekyllbootstrap/theme-the-program.git&quot;</code>或<code>rake theme:install name=&quot;THEME-NAME&quot;</code>默认会将安装到<code>./assets/themes/THEME-NAME</code></li>
<li>切换主题 <code>rake theme:switch name=&quot;the-program&quot;</code></li>
<li>自定义主题 你应该修改<code>./_includes/themes/THEME-NAME</code>下的内容而不是<code>_layouts</code>目录下的文件，因为切换主题的时候会把<code>_layouts</code>目录下的文件覆盖掉。而对于样式文件应该放在<code>./assets/themes/THEME-NAME</code>目录下，并可以使用<code>ASSET_PATH</code>变量来引用这些静态的样式。</li>
<li>发布主题 <code>rake theme:package name=&quot;THEME-NAME&quot;</code>将主题打包，然后可以发布</li>
<li>懒人方法 我喜欢使用Atom来写东西，因为有一个叫jekyll的插件还是很好用的</li>
</ul>
</blockquote>
</li>
</ol>
<h2 id="u76EE_u5F55"><a href="#u76EE_u5F55" class="headerlink" title="目录"></a>目录</h2><pre><code>.
|-- _data                             _data:保存数据的。jekyll会自动加载这里的所有.jml或者.yaml结尾的文件。
                                      比如你有一个members.yml,那么你可以通过site.data.members访问该文件里的数据。
|-- _drafts
    `-- jekyll-introduction-draft.md  草稿，格式是:没有日期.md 通过 jekyll serve --drafts预览 jekyll build --drafts编译
|-- _includes                         包含一些模板，可以重复利用。这种方式是liquid语法
    |-- JB                            JekyllBootstrap库文件
    `-- themes                        主题模板配置目录
|-- _layouts                          模板文件链接到主题配置中，里面的文件通过 `content` 包含_posts里面的文章
    |-- default.html
    |-- page.html
    `-- post.html
|-- _posts                            存放你要发表的文章。格式YEAR-MONTH-DAY-title.MARKUP
    |-- xxx.markdown
    `-- xxxxxx.markdown
|-- _site                             编译后生成的文件
|-- _theme_packages                   安装或打包主题时的临时目录
|-- assets
    |-- themes
        |-- THEME_NAME                主题的临时文件
|-- index.html                        首页
|-- about.html                        导航栏
|-- archive.html                      导航栏
|-- categories.html                   导航栏
|-- 404.html                          404页面
|-- tags.html                         导航栏
|-- atom.xml                          订阅文件
|-- rss.xml                           订阅文件
|-- _config.yml                       存储配置数据。把配置写在这个文件里面，可以让你不用在命令行中写。
|-- sitemap.txt
|-- CNAME                             域名配置文件
`-- Rakefile
</code></pre><h2 id="u53D8_u91CF"><a href="#u53D8_u91CF" class="headerlink" title="变量"></a>变量</h2><ol>
<li>site变量<blockquote>
<ul>
<li>site.time:当前运行jekyll的时间</li>
<li>site.pages:所有的页面</li>
<li>site.posts:以时间逆序排序的所有的文章</li>
<li>site.data：包含从目录_data里面加载的数据列表</li>
</ul>
</blockquote>
</li>
<li>page变量<blockquote>
<ul>
<li>page.content:页面内容</li>
<li>page.title:文章标题</li>
<li>page.urL:页面地址</li>
<li>page.date:页面的日期。可以在front matter重写：2008-12-14 10:30:00 +0900或者YYYY-MM-DD HH:MM:SS</li>
<li>page.id:页面id。 在RSS feeds里面有用。</li>
</ul>
</blockquote>
</li>
<li>Paginator变量<blockquote>
<ul>
<li>paginator.per_page：每一页的文章数</li>
<li>paginator.posts：那一页可用的文章</li>
<li>paginator.page：当前页的值</li>
</ul>
</blockquote>
</li>
</ol>
<h2 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h2><h3 id="u4E3B_u8981_u662F__config-yml__u91CC_u9762_u7684_u4E1C_u897F_uFF0C_u4E00_u770B_u5C31_u61C2_uFF01_uFF01_uFF01"><a href="#u4E3B_u8981_u662F__config-yml__u91CC_u9762_u7684_u4E1C_u897F_uFF0C_u4E00_u770B_u5C31_u61C2_uFF01_uFF01_uFF01" class="headerlink" title="主要是 _config.yml 里面的东西，一看就懂！！！"></a>主要是 _config.yml 里面的东西，一看就懂！！！</h3><hr>
<p><a href="http://blog.csdn.net/maoxunxing/article/details/40479753" target="_blank" rel="external">参考文章</a></p>
]]></content>
    <summary type="html">
    <![CDATA[using jekyll gracefully]]>
    
    </summary>
    
      <category term="jekyll" scheme="http://kangqingfei.cn/tags/jekyll/"/>
    
      <category term="tools" scheme="http://kangqingfei.cn/categories/tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bootstrap FileInput]]></title>
    <link href="http://kangqingfei.cn/2015/02/25/bootstrap-fileinput/"/>
    <id>http://kangqingfei.cn/2015/02/25/bootstrap-fileinput/</id>
    <published>2015-02-24T16:00:00.000Z</published>
    <updated>2015-12-31T06:44:11.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://plugins.krajee.com/file-input" target="_blank" rel="external">bootstrap-fileinput</a></p>
<hr>
<p>这是一个基于<code>Bootstrap3.x</code>的加强版的文件选取插件，支持各种文件的预览功能，多选等。这个插件允许你设置一个高大上的文件选取/上传器通过使用<code>Bootstrap CSS3</code>样式。通过提供各种文件（包括images, text, html, video, audio,flash）的预览支持进一步地加强了文件选择器的功能。另外还支持AJAX上传，拖拽上传，上传进度可视，添加移除文件等</p>
<p>这个插件最初是由<a href="http://www.abeautifulsite.net/blog/2013/08/whipping-file-inputs-into-shape-with-bootstrap-3/" target="_blank" rel="external">这个博客</a>和<a href="http://jasny.github.io/bootstrap/javascript/#fileinput" target="_blank" rel="external"> Jasny的文件选择插件</a>启发，但是现在通过各种新加的特性使得这个插件相比以前更加成熟，使得这个插件已经成为web开发者的全面的文件管理工具。</p>
<p>伴随着<code>v4.0.0</code>版本的发布，这个插件已经支持AJAX上传—持基于大多浏览器支持的<code>HTML5 FormData</code>和<code>XHR2</code>协议。并且还内置支持以AJAX方式删除服务器端的文件。这就拥有了一个能够快速的删除、添加和移除文件的特性。这个插件还支持拖拽形式的AJAX文件上传。对于浏览器不支持<code>HTML5 FormData</code>和<code>XHR2</code>的情况，会自动使用普通的表单提交方式。</p>
<h3 id="u6587_u4EF6_u9009_u53D6_u7279_u6027"><a href="#u6587_u4EF6_u9009_u53D6_u7279_u6027" class="headerlink" title="文件选取特性"></a>文件选取特性</h3><ol>
<li><p>这个插件将一个普通的 HTML文件选取变成一个高级的文件选取器，但是对于那些不支持<code>JQuery</code>h和<code>Javascript</code>的浏览器，将使用原生的HTML文件选取。</p>
</li>
<li><p>这个文件选择器由以下三个部分组成，可以通过选项和模板来控制器各部分的显示：</p>
<blockquote>
<ul>
<li>文件说明部分：显示已选文件的简短信息。</li>
<li>文件操作按钮：用于选取、移除上传文件。</li>
<li>文件预览部分：显示已选文件的预览（支持 image, text, flash, and video等文件格式）。</li>
</ul>
</blockquote>
</li>
<li><p>这个插件自动转换的输入<code>type = file</code>为一个高级的文件选择器，如果你设置它的<code>class = file</code>。所有的选项可以使用HTML5数据属性。</p>
</li>
<li><p>选择并预览多个文件的能力。使用HTML 5的文件阅读器API（<code>HTML 5 File reader API</code>）来读取和预览文件。显示文件被加载到预览区，如果选取了多个文件。</p>
</li>
<li><p>提供了预定义的模板和CSS类都可以按需求改变你的文件输入显示风格。</p>
</li>
<li><p>现在你可以配置插件显示初始的 预览图片/文件初始标题 (更有用更新场景)。参考<code>initialPreview</code>和<code>initialCaption</code>属性配置的插件选项部分。</p>
</li>
<li><p>可以显示/隐藏的部分如下:</p>
<blockquote>
<ul>
<li>文件说明信息部分。</li>
<li>预览部分。</li>
<li>上传按钮。</li>
<li>移除按钮。</li>
</ul>
</blockquote>
</li>
<li><p>定制目标容器元素的位置来显示整个插件，容器的标题、标题文本、预览容器、预览图像和预览状态。</p>
</li>
<li><p>对于文本文件预览,自动调整文本缩略图的宽度,并在悬停时显示一个完整的文本链接。你可以自定义新窗口预览文件的标记(默认为…)。</p>
</li>
<li><p>自定义预览、进度、已选文件的信息。</p>
</li>
<li><p>上传操作默认表单提交。支持上传 路由/服务器 action 参数定制的基于ajax的上传。</p>
</li>
<li><p>触发JQuery事件用于高级的开发。目前可用的事件有<code>filereset、fileclear、filecleared fileloaded、fileerror</code>。</p>
</li>
<li><p>支持只读文件选取器。</p>
</li>
<li><p>对于超过容器宽度的长文件名的情况，自动调整文件标题的显示长度。</p>
</li>
<li><p>新的<code>fileimageuploaded</code>支持，当文件完全加载进预览容器时触发。</p>
</li>
<li><p>自动调整超出预览容器大小的图片的大小。</p>
</li>
<li><p>完全的模板化和可扩展的,允许配置文件选择器为开发人员想要的。</p>
</li>
<li><p>可以通过<code>allowedPreviewTypes</code>配置可以预览文件的类型。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://plugins.krajee.com/file-input" target="_blank" rel="external">bootstrap-fileinput</a></p>
<hr>
<p>这是一个基于<code>Bootstrap3.]]>
    </summary>
    
      <category term="BootStrap" scheme="http://kangqingfei.cn/tags/BootStrap/"/>
    
      <category term="HTML5" scheme="http://kangqingfei.cn/tags/HTML5/"/>
    
      <category term="XHR2" scheme="http://kangqingfei.cn/tags/XHR2/"/>
    
      <category term="web" scheme="http://kangqingfei.cn/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[first article]]></title>
    <link href="http://kangqingfei.cn/2015/02/09/first-article/"/>
    <id>http://kangqingfei.cn/2015/02/09/first-article/</id>
    <published>2015-02-08T16:00:00.000Z</published>
    <updated>2015-12-29T17:00:34.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u535A_u5BA2_u642D_u5EFA_u6210_u529F_in_20150310"><a href="#u535A_u5BA2_u642D_u5EFA_u6210_u529F_in_20150310" class="headerlink" title="博客搭建成功 in 20150310"></a>博客搭建成功 in 20150310</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u535A_u5BA2_u642D_u5EFA_u6210_u529F_in_20150310"><a href="#u535A_u5BA2_u642D_u5EFA_u6210_u529F_in_20150310" class="headerlink" title]]>
    </summary>
    
      <category term="test" scheme="http://kangqingfei.cn/tags/test/"/>
    
      <category term="test" scheme="http://kangqingfei.cn/categories/test/"/>
    
  </entry>
  
</feed>
